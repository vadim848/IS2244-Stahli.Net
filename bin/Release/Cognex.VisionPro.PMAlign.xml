<?xml version="1.0"?><doc><assembly><name>Cognex.VisionPro.PMAlign</name></assembly><members><member name="T:Cognex.VisionPro.Exceptions.CogPMAlignCanNotTrainException"><summary>The exception that is thrown when any of the following occur: (1) the TrainImageMask contains illegal values, (2) the training image has no features, or (3) no part of the supplied TrainShapeModels lie within the TrainRegion.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogPMAlignPatMaxNotTrainedException"><summary>The exception that is thrown when the pattern was not trained for PatMax and <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.RunAlgorithm" /> is set to 'PatMax'.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogPMAlignPatQuickNotTrainedException"><summary>The exception that is thrown when the pattern was not trained for PatQuick and <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.RunAlgorithm" /> is set to 'PatQuick'.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogPMAlignPatMaxPerspectiveNotTrainedException"><summary>The exception that is thrown when the pattern was not trained for PatMaxPerspective and <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.RunAlgorithm" /> is set to 'PatMaxPerspective'.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogPMAlignInvalidPCPException"><summary>The exception that is thrown when the PCPLoadFromFile method of <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignPattern" /> encounters an invalid PCP string. If this error occurs, any existing PCP string is lost.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogPMAlignImportFromCVLErrorException"><summary>The exception that is thrown when the ImportFromCvlArchive method of <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignPattern" /> encounters an archive file that cannot be read.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogPMAlignSaveMatchInfoErrorException"><summary>The exception that is thrown when the SaveMatchInfo property of <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams" /> does not agree with the ResultsMatchFeatures bit of <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.LastRunRecordDiagEnable" />.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogPMAlignNoShapeModelsException"><summary>The exception that is thrown when <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainShapeModels" /> is either null or empty.  This exception is only thrown if <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainMode" /> is 'ShapeModelsWithImage' or 'ShapeModelsWithTransform'.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogPMAlignBadWeightsException"><summary>The exception that is thrown when none of the shape models in <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainShapeModels" /> have effective weights greater than 0.  This exception is only thrown if <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainMode" /> is 'ShapeModelsWithImage' or 'ShapeModelsWithTransform'.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogPMAlignModelTooLargeException"><summary>The exception that is thrown when <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainShapeModels" /> contains an infinite shape, such as a CogLine, and TrainRegion is null.  This exception is only thrown if <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainMode" /> is 'ShapeModelsWithImage' or 'ShapeModelsWithTransform'.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogPMAlignUndefinedPolarityException"><summary>The exception that is thrown when <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainShapeModels" /> contains at least one shape model with an indeterminate polarity and the IgnorePolarity property is false.  This exception is only thrown if <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainMode" /> is 'ShapeModelsWithImage' or 'ShapeModelsWithTransform'.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogPMAlignWrongTrainModeException"><summary>The exception that is thrown when <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainMode" /> is incompatible with the requested PatMax operation.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogPMAlignPatFlexNotTrainedException"><summary>The exception that is thrown when the pattern was not trained for PatFlex and <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.RunAlgorithm" /> is set to 'PatFlex'.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogPMAlignSaveDeformationInfoErrorException"><summary>The exception that is thrown when the SaveDeformationInfo property of <see cref="P:Cognex.VisionPro.PMAlign.ICogPMAlignFlexRunParams" /> does not agree with the FlexDeformationGrid bit of <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.LastRunRecordDiagEnable" />.</summary></member><member name="T:Cognex.VisionPro.Exceptions.CogPMAlignInvalidOutsideRegionThresholdException"><summary>The exception that is thrown when the pattern was trained for PatFlex or PatMaxPerspective and the OutsideRegionThreshold is not set to 0.</summary></member><member name="T:Cognex.VisionPro.PMAlign.CogPMAlignPattern"><remarks><PARA>The <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignPattern" /> interface provides access to all of the properties that define the pattern you are searching for.</PARA></remarks><summary>Class which holds a single PMAlign pattern used for locating features within an image.  Primary interface provides access to the training parameters, a method to train the pattern, results of training the pattern, and a method to execute an inspection.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignPattern.#ctor(Cognex.VisionPro.PMAlign.CogPMAlignPattern)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignPattern.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoIDs"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetInfoIDs may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfIgnorePolarity"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by IgnorePolarity may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfElasticity"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Elasticity may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfExpectedDeformationRate"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ExpectedDeformationRate may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfHighSensitivityParameter"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by HighSensitivityParameter may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGrainLimitAutoSelect"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GrainLimitAutoSelect may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGrainLimitCoarse"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GrainLimitCoarse may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGrainLimitFine"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GrainLimitFine may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfPCPString"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PCPString may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainAlgorithm"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TrainAlgorithm may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TrainMode may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TrainImage may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainShapeModels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TrainShapeModels may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainShapeModelsTransform"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TrainShapeModelsTransform may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainRegion"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TrainRegion may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainRegionMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TrainRegionMode may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfOrigin"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Origin may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainImageMask"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TrainImageMask may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainImageMaskOffsetX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TrainImageMaskOffsetX may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainImageMaskOffsetY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TrainImageMaskOffsetY may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrained"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Trained may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsCoarse"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CreateGraphicsCoarse may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsFine"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CreateGraphicsFine may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoStrings"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetInfoStrings may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetTrainedPatternImage may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImageMask"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetTrainedPatternImageMask may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternShapeModels"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetTrainedPatternShapeModels may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfRepeatingPatterns"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetRepeatingPatterns may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfEdgeThreshold"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetEdgeThreshold may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfAutoEdgeThresholdEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GetAutoEdgeThresholdEnabled may have changed.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.EdgeThreshold"><summary>Train-time edge threshold, under which, the edges will be ignored. Valid value is from 0.0 to 255.0. Default value is 10.0.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.AutoEdgeThresholdEnabled"><summary>If true, an automatically computed edge threshold will be used for training. If false, the user provided edge threshold will be used.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.RepeatingPatterns"><summary>If true and training algorithm is Patmax, the pattern will be trained specially for repeating patterns. Otherwise, the pattern will be trained as before.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Trained"><summary>True if the pattern is trained.</summary><remarks><PARA>True if the pattern is trained.</PARA></remarks><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.PMAlign


Private myPattern As New CogPMAlignPattern
Private myParams As New CogPMAlignRunParams
Private myResults As CogPMAlignResults


Private Sub doSearch()
    Dim i As Integer
    Dim cross As CogPointMarker


    myParams.ApproximateNumberToFind = 4
    myParams.AcceptThreshold = 0.5
    myParams.RunAlgorithm = CogPMAlignRunAlgorithmConstants.BestTrained

    myParams.ZoneAngle.Configuration = CogPMAlignZoneConstants.LowHigh
    myParams.ZoneAngle.High = Math.PI / 8
    myParams.ZoneAngle.Low = -(Math.PI / 4)

    myParams.ZoneScale.Configuration = CogPMAlignZoneConstants.LowHigh
    myParams.ZoneScale.High = 1.3
    myParams.ZoneScale.Low = 0.75


    If Not myPattern.Trained Then
        MsgBox("The pattern is not trained")
        Exit Sub
    End If

    myResults = myPattern.Execute(anImage, Nothing, myParams)

    For i = 0 To myResults.Count - 1
        cross = New CogPointMarker
        cross.Interactive = True
        cross.X = myResults.Item(i).GetPose.TranslationX
        cross.Y = myResults.Item(i).GetPose.TranslationY
        cross.TipText = "result " &amp; myResults.Item(i).ID &amp; ": " &amp; myResults.Item(i).Score
        If myResults.Item(i).Accepted Then
            cross.Color = CogColorConstants.Green
        Else
            cross.Color = CogColorConstants.Red
        End If

        CogDisplay1.InteractiveGraphics.Add(cross, "crosses", False)
    Next

    CogDisplay1.InteractiveGraphicTipsEnabled = True
End Sub
      </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.PMAlign;

private CogPMAlignPattern myPattern = new CogPMAlignPattern();
private CogPMAlignRunParams myParams =new CogPMAlignRunParams();
private CogPMAlignResults myResults;

private void doSearch()
{
  int i=0;
  CogPointMarker cross; 


  myParams.ApproximateNumberToFind = 4;
  myParams.AcceptThreshold = 0.5;
  myParams.RunAlgorithm = CogPMAlignRunAlgorithmConstants.BestTrained;

  myParams.ZoneAngle.Configuration = CogPMAlignZoneConstants.LowHigh;
  myParams.ZoneAngle.High = Math.PI / 8;
  myParams.ZoneAngle.Low = -(Math.PI / 4);

  myParams.ZoneScale.Configuration = CogPMAlignZoneConstants.LowHigh;
  myParams.ZoneScale.High = 1.3;
  myParams.ZoneScale.Low = 0.75;


  if ( !myPattern.Trained ) 
  {
    MessageBox.Show("The pattern is not trained");
    return;     
  }

  myResults = myPattern.Execute(anImage, null, myParams);

  for( i=0; i &lt; myResults.Count; i++ )
  {
    cross = new CogPointMarker();
    cross.Interactive = true;
    cross.X = myResults[i].GetPose().TranslationX;
    cross.Y = myResults[i].GetPose().TranslationY;
    cross.TipText = "result " + myResults[i].ID + ": " + myResults[i].Score;
    if ( myResults[i].Accepted )
      cross.Color = CogColorConstants.Green;
    else
      cross.Color = CogColorConstants.Red;

    CogDisplay1.InteractiveGraphics.Add(cross, "crosses", false);
  }
  CogDisplay1.InteractiveGraphicTipsEnabled = true;
                                            
}

      </code></example></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainImageMaskOffsetY"><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignPattern_TrainImageMaskOffsetY--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainImageMaskOffsetY" /></li></ul></event><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes and the pattern was untrained.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_PMAlignPattern_TrainImageMask--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainImageMask" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainImageMaskOffsetX" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainImageMaskOffsetY" /></li><!--FA:cogFA_PMAlignPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoIDs" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsCoarse" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsFine" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoStrings" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImage" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImageMask" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternShapeModels" /></li></ul></event><summary>Y offset value in pixels.  The X &amp; Y offset values measure the offset from the upper-left corner of the TrainImage to the upper-left corner of the TrainImageMask in image coordinates of the TrainImage.</summary><remarks><PARA>Y offset value in pixels.  The X &amp; Y offset values measure the offset from the upper-left corner of the TrainImage to the upper-left corner of the TrainImageMask in image coordinates of the TrainImage.</PARA><NOTE>Changing this property causes this <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignPattern" /> to become untrained.</NOTE><DEFAULT>0.0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainImageMaskOffsetX"><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignPattern_TrainImageMaskOffsetX--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainImageMaskOffsetX" /></li></ul></event><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes and the pattern was untrained.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_PMAlignPattern_TrainImageMask--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainImageMask" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainImageMaskOffsetX" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainImageMaskOffsetY" /></li><!--FA:cogFA_PMAlignPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoIDs" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsCoarse" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsFine" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoStrings" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImage" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImageMask" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternShapeModels" /></li></ul></event><remarks><PARA>X offset value in pixels.  The X &amp; Y offset values measure the offset from the upper-left corner of the TrainImage to the upper-left corner of the TrainImageMask in image coordinates of the TrainImage.</PARA><NOTE>Changing this property causes this <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignPattern" /> to become untrained.</NOTE><DEFAULT>0.0</DEFAULT></remarks><summary>X offset value in pixels.  The X &amp; Y offset values measure the offset from the upper-left corner of the TrainImage to the upper-left corner of the TrainImageMask in image coordinates of the TrainImage.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainImageMask"><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignPattern_TrainImageMask--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainImageMask" /></li></ul></event><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes and the pattern was untrained.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_PMAlignPattern_TrainImageMask--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainImageMask" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainImageMaskOffsetX" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainImageMaskOffsetY" /></li><!--FA:cogFA_PMAlignPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoIDs" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsCoarse" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsFine" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoStrings" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImage" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImageMask" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternShapeModels" /></li></ul></event><summary>Mask used when training the PMAlign pattern.  The mask allows the user to identify areas of the pattern as "Care" or "Don't Care".  The "Don't Care" areas can also be subclassified into "Score" and "Don't Score" with regards to clutter.</summary><remarks><PARA><see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="pattern_masking">Mask </see>used when training the PMAlign pattern.  The pixel values in the mask image are interpreted as follows:</PARA><PARA><BOLD>Greater than 191</BOLD> Care pixels. Features within care pixels are included in the trained pattern.</PARA><PARA><BOLD>64 through 127</BOLD> Don't Care but Score. Features within these pixels are not included in the trained pattern, but when found in the run-time pattern, they are scored as clutter features.</PARA><PARA><BOLD>0 through 63</BOLD> Don't Care and Don't Score. Features within these pixels are not included in the trained pattern, and when found in the run-time pattern, they are not scored as clutter features.</PARA><PARA><BOLD>128 through 191</BOLD> Reserved for future use by Cognex.</PARA><NOTE>Changing this property causes this <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignPattern" /> to become untrained.</NOTE><DEFAULT>NULL (no mask image)</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Origin"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> is NULL.</para></exception><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignPattern_Origin--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfOrigin" /></li></ul></event><remarks><PARA>A 6 DOF  <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="generalized_pattern_origin">generalized pattern origin</see> for the pattern.  This transform maps from "Pattern Space" to the selected space of TrainImage.</PARA><DEFAULT>The identity transform.</DEFAULT></remarks><summary>A 6 DOF origin for the pattern.  This transform maps from "Pattern Space" to the selected space of TrainImage.</summary><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.PMAlign

Private myPattern As CogPMAlignPattern
Private myParams As CogPMAlignRunParams
Private myResults As CogPMAlignResults
    
Private Sub doTrain()

  myPattern = New CogPMAlignPattern
  myParams = New CogPMAlignRunParams
  myResults = New CogPMAlignResults

  myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick
  myPattern.TrainMode = CogPMAlignTrainModeConstants.Image

  myPattern.TrainImage = anImage
  myPattern.TrainRegion = trainRect
  myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox
  myPattern.Origin.TranslationX = trainRect.CenterX
  myPattern.Origin.TranslationY = trainRect.CenterY

 

  myPattern.Train()
end sub
     </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.PMAlign;

private CogPMAlignPattern myPattern;
private CogPMAlignRunParams myParams;
private CogPMAlignResults myResults;

private void doTrain()
{
  myPattern = new CogPMAlignPattern();
  myParams = new CogPMAlignRunParams();
  myResults =new CogPMAlignResults();

  myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick;
  myPattern.TrainMode = CogPMAlignTrainModeConstants.Image;


  myPattern.TrainImage = anImage;
  myPattern.TrainRegion = trainRect;
  myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox;
  myPattern.Origin.TranslationX = trainRect.CenterX;
  myPattern.Origin.TranslationY = trainRect.CenterY;

 
  myPattern.Train();
}
    </code></example></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainRegionMode"><summary>Specifies how the TrainRegion is applied to the TrainImage.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is neither
        		<see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>  nor
        		<see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBoxAdjustMask</see>.
	</para></exception><remarks><PARA>Specifies how the <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainRegion" /> is applied to the TrainImage. The value of this property must be one of the values specified in <see cref="T:Cognex.VisionPro.CogRegionModeConstants" />.</PARA><NOTE>Changing this property causes this <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignPattern" /> to become untrained.</NOTE><DEFAULT><see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBoxAdjustMask</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignPattern_TrainRegionMode--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainRegionMode" /></li></ul></event><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes and the pattern was untrained.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_PMAlignPattern_TrainRegion--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainRegion" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainRegionMode" /></li><!--FA:cogFA_PMAlignPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoIDs" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsCoarse" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsFine" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoStrings" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImage" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImageMask" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternShapeModels" /></li></ul></event><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.PMAlign

Private myPattern As New CogPMAlignPattern
Private myParams As New CogPMAlignRunParams
Private myResults As CogPMAlignResults
    
Private Sub doTrain()


  myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick
  myPattern.TrainMode = CogPMAlignTrainModeConstants.Image

  myPattern.TrainImage = anImage
  myPattern.TrainRegion = trainRect
  myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox
  myPattern.Origin.TranslationX = trainRect.CenterX
  myPattern.Origin.TranslationY = trainRect.CenterY

 

  myPattern.Train()
end sub
     </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.PMAlign;

private CogPMAlignPattern myPattern = new CogPMAlignPattern();
private CogPMAlignRunParams myParams =new CogPMAlignRunParams();
private CogPMAlignResults myResults;

private void doTrain()
{

  myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick;
  myPattern.TrainMode = CogPMAlignTrainModeConstants.Image;


  myPattern.TrainImage = anImage;
  myPattern.TrainRegion = trainRect;
  myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox;
  myPattern.Origin.TranslationX = trainRect.CenterX;
  myPattern.Origin.TranslationY = trainRect.CenterY;

 
  myPattern.Train();
}
    </code></example></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainRegion"><summary>Region of interest indicating portion of TrainImage or TrainShapeModels that will be used to train the pattern.  A NULL TrainRegion indicates that the entire TrainImage or TrainShapeModels will be used to train the PMAlign pattern.</summary><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignPattern_TrainRegion--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainRegion" /></li></ul></event><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes and the pattern was untrained.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_PMAlignPattern_TrainRegion--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainRegion" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainRegionMode" /></li><!--FA:cogFA_PMAlignPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoIDs" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsCoarse" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsFine" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoStrings" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImage" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImageMask" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternShapeModels" /></li></ul></event><remarks><PARA>Region of interest in the  <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainImage" /> that will be used to train the pattern.  A NULL TrainRegion indicates that the entire TrainImage will be used to train the PMAlign pattern.</PARA><PARA>
You can specify any type of region for the training region (<see cref="T:Cognex.VisionPro.CogRectangle" />, 
<see cref="T:Cognex.VisionPro.CogRectangleAffine" />, <see cref="T:Cognex.VisionPro.CogCircle" />, <see cref="T:Cognex.VisionPro.CogEllipse" />, and so on). If you specify a region type other than a Rectangle, the tool uses PatMax masking to train only the features within the specified region.
</PARA><NOTE>
This <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignPattern" /> will sink changed events for the region that you supply. Whenever the region changes, this <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignPattern" /> will become untrained.
</NOTE><DEFAULT>An <see cref="T:Cognex.VisionPro.CogRectangleAffine" /></DEFAULT></remarks><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.PMAlign

Private myPattern As New CogPMAlignPattern
Private myParams As New CogPMAlignRunParams
Private myResults As CogPMAlignResults
    
Private Sub doTrain()


  myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick
  myPattern.TrainMode = CogPMAlignTrainModeConstants.Image

  myPattern.TrainImage = anImage
  myPattern.TrainRegion = trainRect
  myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox
  myPattern.Origin.TranslationX = trainRect.CenterX
  myPattern.Origin.TranslationY = trainRect.CenterY

 

  myPattern.Train()
end sub
     </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.PMAlign;

private CogPMAlignPattern myPattern = new CogPMAlignPattern();
private CogPMAlignRunParams myParams =new CogPMAlignRunParams();
private CogPMAlignResults myResults;

private void doTrain()
{

  myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick;
  myPattern.TrainMode = CogPMAlignTrainModeConstants.Image;


  myPattern.TrainImage = anImage;
  myPattern.TrainRegion = trainRect;
  myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox;
  myPattern.Origin.TranslationX = trainRect.CenterX;
  myPattern.Origin.TranslationY = trainRect.CenterY;

 
  myPattern.Train();
}
    </code></example></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainShapeModelsTransform"><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignPattern_TrainShapeModelsTransform--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainShapeModelsTransform" /></li></ul></event><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="multiState"><para>
		
		Fires when this property changes and the pattern becomes untrained. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_PMAlignPattern_TrainShapeModelsTransform--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainShapeModelsTransform" /></li><!--FA:cogFA_PMAlignPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoIDs" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsCoarse" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsFine" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoStrings" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImage" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImageMask" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternShapeModels" /></li></ul></event><remarks><PARA>A transform that defines the space of all shape models when <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainMode" /> is 
	<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants">ShapeModelsWithTransform</see>, 
	otherwise, this transform is ignored. This is a pixel from shape model space transform that maps the shapes to the pixel space of the expected run-time image.</PARA><PARA>
This transformation describes how to map the geometric properties of the shapes 
in <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainShapeModels" /> into a pixel space that corresponds to the pixels of the run-time image. If 
you specify <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants">ShapeModelsWithTransform</see> for 
the <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainMode" />, the selected space of the shape models are ignored.
</PARA><PARA>
 This CogPMAlignPattern sinks change events from the supplied 
 <see cref="T:Cognex.VisionPro.CogTransform2D" /> and 
 will become untrained if that object changes or if the reference to the property changes.
 </PARA><DEFAULT>An identity transform.</DEFAULT></remarks><summary>Transform defines the space of all shape models when TrainMode is cogPMAlignTrainModeShapeModelsWithTransform, otherwise, this transform is ignored.  This is a pixel from shape model space transform.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainShapeModels"><summary>A collection of shape models used to train a PMAlign pattern when the TrainMode property is either cogPMAlignTrainModeShapeModelsWithImage or cogPMAlignTrainModeShapeModelsWithTransform.</summary><remarks><PARA>A collection of <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="shape_training">shape models</see> used to train this  pattern when the 
	<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainMode" /> property is either 
	<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants">ShapeModelsWithImage</see> or 
	<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants">ShapeModelsWithTransform</see>.
	</PARA><PARA>
 The CogPMAlignPattern object will sink collection events for the 
this property, and it will be untrained if an ItemAdded, Cleared, ItemRemoved, or
 ItemReplaced event occurs.  The pattern also will untrain if a
geometry, selected space, weight, or polarity change is detected for 
any sub-objects (shape models) of the collection. The CogPMAlignPattern 
object will also become untrained if this property reference is changed.
</PARA><DEFAULT>An empty collection.</DEFAULT></remarks><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignPattern_TrainShapeModels--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainShapeModels" /></li></ul></event><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="multiState"><para>
		
		Fires when this property changes and the pattern becomes untrained. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_PMAlignPattern_TrainShapeModels--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainShapeModels" /></li><!--FA:cogFA_PMAlignPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoIDs" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsCoarse" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsFine" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoStrings" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImage" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImageMask" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternShapeModels" /></li></ul></event><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.PMAlign

Private myPattern As New CogPMAlignPattern
Private myParams As New CogPMAlignRunParams
Private myResults As CogPMAlignResults
    
Private Sub doTrain()
  Dim affRect As New CogRectangleAffine
  Dim newTransform As New CogTransform2DLinear
  Dim shapeModel As ICogShapeModel
  Dim i As Integer

  myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick
  myPattern.TrainMode = CogPMAlignTrainModeConstants.ShapeModelsWithImage

  affRect.SetFromRectangle(trainRect, newTransform)
  shapeModel = affRect.MakeShapeModel(1, CogShapeModelPolarityConstants.NegativeOne, True)

  myPattern.TrainShapeModels.Add(shapeModel)

  myPattern.TrainImage = anImage
  myPattern.TrainRegion = Nothing
  myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox
  myPattern.Origin.TranslationX = trainRect.CenterX
  myPattern.Origin.TranslationY = trainRect.CenterY

  myPattern.Train()
  CogDisplay1.Image = myPattern.GetTrainedPatternImage
  For i = 0 To myPattern.GetTrainedPatternShapeModels.Count - 1
      CogDisplay1.StaticGraphics.Add(CType(myPattern.GetTrainedPatternShapeModels.Item(i).Shape, ICogGraphic), "")
  Next
end sub
     </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.PMAlign;

private CogPMAlignPattern myPattern = new CogPMAlignPattern();
private CogPMAlignRunParams myParams =new CogPMAlignRunParams();
private CogPMAlignResults myResults;

private void doTrain()
{
  CogRectangleAffine affRect = new CogRectangleAffine();
  CogTransform2DLinear newTransform = new CogTransform2DLinear();
  ICogShapeModel shapeModel; 
  int i;

  myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick;
  myPattern.TrainMode = CogPMAlignTrainModeConstants.ShapeModelsWithImage;

  affRect.SetFromRectangle(trainRect, newTransform);
  shapeModel = affRect.MakeShapeModel(1, CogShapeModelPolarityConstants.NegativeOne, true);

  myPattern.TrainShapeModels.Add(shapeModel);

  myPattern.TrainImage = anImage;
  myPattern.TrainRegion = null;
  myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox;
  myPattern.Origin.TranslationX = trainRect.CenterX;
  myPattern.Origin.TranslationY = trainRect.CenterY;
  myPattern.Train();
  CogDisplay1.Image = myPattern.GetTrainedPatternImage();
  for( i=0; i &lt; myPattern.GetTrainedPatternShapeModels().Count; i++)
    {
      CogDisplay1.StaticGraphics.Add((ICogGraphic) myPattern.GetTrainedPatternShapeModels().get_Item(i).Shape, "");
    }
}
    </code></example></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainImage"><summary>Pattern image used to train PMAlign.  The TrainRegion is applied to this TrainImage in order to define the region that will be used to train the pattern.  The TrainRegionMode property specifies how the region will be applied to this image.</summary><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignPattern_TrainImage--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainImage" /></li></ul></event><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes and the pattern was untrained.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_PMAlignPattern_TrainImage--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainImage" /></li><!--FA:cogFA_PMAlignPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoIDs" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsCoarse" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsFine" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoStrings" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImage" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImageMask" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternShapeModels" /></li></ul></event><remarks><PARA>The <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainRegion" /> is applied to this <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainImage" /> in order to define the region that will be used to train the pattern.  The  <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainRegionMode" /> property specifies how the region will be applied to this image.</PARA><PARA>
This property is stored as a reference to the supplied image. If you change the value of this property, this <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignPattern" /> becomes  <see cref="M:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Untrain">untrained</see>, but if you change the pixels in the <see cref="T:Cognex.VisionPro.CogImage8Grey" /> that this property refers to, it is not untrained.
</PARA><NOTE>Changing this property causes this <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignPattern" /> to become untrained.</NOTE><DEFAULT>NULL (no image)</DEFAULT></remarks><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.PMAlign

Private myPattern As CogPMAlignPattern
Private myParams As CogPMAlignRunParams
Private myResults As CogPMAlignResults
    
Private Sub doTrain()

  myPattern = New CogPMAlignPattern
  myParams = New CogPMAlignRunParams
  myResults = New CogPMAlignResults

  myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick
  myPattern.TrainMode = CogPMAlignTrainModeConstants.Image

  myPattern.TrainImage = anImage
  myPattern.TrainRegion = trainRect
  
  myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox
  myPattern.Origin.TranslationX = trainRect.CenterX
  myPattern.Origin.TranslationY = trainRect.CenterY

  myPattern.Train()
end sub
     </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.PMAlign;

private CogPMAlignPattern myPattern;
private CogPMAlignRunParams myParams;
private CogPMAlignResults myResults;

private void doTrain()
{
  myPattern = new CogPMAlignPattern();
  myParams = new CogPMAlignRunParams();
  myResults =new CogPMAlignResults();

  myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick;
  myPattern.TrainMode = CogPMAlignTrainModeConstants.Image;


  myPattern.TrainImage = anImage;
  myPattern.TrainRegion = trainRect;
  
  myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox;
  myPattern.Origin.TranslationX = trainRect.CenterX;
  myPattern.Origin.TranslationY = trainRect.CenterY;

  myPattern.Train();
}
    </code></example></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainMode"><remarks><PARA>Train mode indicates whether a PMAlign pattern should be trained based on the pixel content of the training image or trained based on a synthetic pattern described by a collection of <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="shape_training">shape models</see>.
Changing the value of this property will untrain the pattern.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants">Image</see></DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is not a member of the 
   <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants" />.</para></exception><summary>Train mode indicates whether a PMAlign pattern should be trained based on the pixel content of the training image or trained based on a synthetic pattern described by a collection of shape models.</summary><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignPattern_TrainMode--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainMode" /></li></ul></event><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="multiState"><para>
		
		Fires when this property changes and the pattern becomes untrained. 
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_PMAlignPattern_TrainMode--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainMode" /></li><!--FA:cogFA_PMAlignPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoIDs" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsCoarse" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsFine" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoStrings" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImage" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImageMask" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternShapeModels" /></li></ul></event><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.PMAlign

Private myPattern As New CogPMAlignPattern
Private myParams As New CogPMAlignRunParams
Private myResults As CogPMAlignResults
    
Private Sub doTrain()


  myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick
  myPattern.TrainMode = CogPMAlignTrainModeConstants.Image

  myPattern.TrainImage = anImage
  myPattern.TrainRegion = trainRect
  myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox
  myPattern.Origin.TranslationX = trainRect.CenterX
  myPattern.Origin.TranslationY = trainRect.CenterY

 

  myPattern.Train()
end sub
     </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.PMAlign;

private CogPMAlignPattern myPattern = new CogPMAlignPattern();
private CogPMAlignRunParams myParams =new CogPMAlignRunParams();
private CogPMAlignResults myResults;

private void doTrain()
{

  myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick;
  myPattern.TrainMode = CogPMAlignTrainModeConstants.Image;


  myPattern.TrainImage = anImage;
  myPattern.TrainRegion = trainRect;
  myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox;
  myPattern.Origin.TranslationX = trainRect.CenterX;
  myPattern.Origin.TranslationY = trainRect.CenterY;

 
  myPattern.Train();
}
    </code></example></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainAlgorithm"><remarks><PARA>A <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainAlgorithmConstants" /> specifying the algorithm(s) used to train this PMAlign pattern.  The PMAlign pattern can only be executed using the algorithms that were enabled at train-time.  The algorithm actually used at run-time is specified in <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignRunParams" /> that you specify for the search.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainAlgorithmConstants">PatMaxAndPatQuick</see>
		 if Cognex security for PatMax is available, 
		<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainAlgorithmConstants">PatQuick</see>
		 if not.
</DEFAULT></remarks><summary>Algorithm(s) used to train this PMAlign pattern.  The PMAlign pattern can only be executed using the algorithms that were enabled at train-time.  The algorithm actually used at run-time is specified in ICogPMAlignRunParams.</summary><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignPattern_TrainAlgorithm--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainAlgorithm" /></li></ul></event><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes and the pattern was untrained.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_PMAlignPattern_TrainAlgorithm--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainAlgorithm" /></li><!--FA:cogFA_PMAlignPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoIDs" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsCoarse" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsFine" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoStrings" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImage" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImageMask" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternShapeModels" /></li></ul></event><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.PMAlign

Private myPattern As CogPMAlignPattern
Private myParams As CogPMAlignRunParams
Private myResults As CogPMAlignResults
    
Private Sub doTrain()

  myPattern = New CogPMAlignPattern
  myParams = New CogPMAlignRunParams
  myResults = New CogPMAlignResults

  myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick
  myPattern.TrainMode = CogPMAlignTrainModeConstants.Image

  myPattern.TrainImage = anImage
  myPattern.TrainRegion = trainRect
  
  myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox
  myPattern.Origin.TranslationX = trainRect.CenterX
  myPattern.Origin.TranslationY = trainRect.CenterY

  myPattern.Train()
end sub
     </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.PMAlign;

private CogPMAlignPattern myPattern;
private CogPMAlignRunParams myParams;
private CogPMAlignResults myResults;

private void doTrain()
{
  myPattern = new CogPMAlignPattern();
  myParams = new CogPMAlignRunParams();
  myResults =new CogPMAlignResults();

  myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick;
  myPattern.TrainMode = CogPMAlignTrainModeConstants.Image;


  myPattern.TrainImage = anImage;
  myPattern.TrainRegion = trainRect;
  
  myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox;
  myPattern.Origin.TranslationX = trainRect.CenterX;
  myPattern.Origin.TranslationY = trainRect.CenterY;

  myPattern.Train();
}
    </code></example></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.PCPDiagMessage"><remarks><PARA>Diagnostic data string for use by Cognex.</PARA></remarks><summary>Diagnostic data string for use by Cognex.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.PCPString"><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignPattern_PCPString--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfPCPString" /></li></ul></event><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes and the pattern was untrained.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_PMAlignPattern_PCPString--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfPCPString" /></li><!--FA:cogFA_PMAlignPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoIDs" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsCoarse" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsFine" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoStrings" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImage" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImageMask" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternShapeModels" /></li></ul></event><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="multiState"><para>
        
Fires when the string was not changed successfully
	(<see cref="T:Cognex.VisionPro.Exceptions.CogPMAlignInvalidPCPException" />), but the pattern was untrained.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_PMAlignPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoIDs" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsCoarse" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsFine" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoStrings" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImage" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImageMask" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternShapeModels" /></li></ul></event><exception cref="T:Cognex.VisionPro.Exceptions.CogPMAlignInvalidPCPException" cgnxHRESULT="E_CogPMAlign_InvalidPCP"><para>
           An invalid PCP string was supplied. If this error occurs, any existing PCP string is lost and the contents of the <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignPattern" /> are undefined.
            </para></exception><remarks><PARA>Customization string (PCP) used to customize this PMAlign pattern.  The PCP string can be set by either setting the PCPString property directly or calling the PCPLoadFromFile method.  An empty string indicates that no PCP is set for this pattern.</PARA><NOTE>Changing this property causes this <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignPattern" /> to become untrained.</NOTE><DEFAULT>NULL (an empty string)</DEFAULT></remarks><summary>Customization string (PCP) used to customize this PMAlign pattern.  The PCP string can be set by either setting the PCPString property directly or calling the PCPLoadFromFile method.  An empty string indicates that no PCP is set for this pattern.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.GrainLimitFine"><remarks><PARA>Fine <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="feature_size_and_pattern_granularity">granularity</see> limit.  You  can manually set the grain limit if <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.GrainLimitAutoSelect" /> is False.  The valid range is from 1.0 to 25.5.</PARA><PARA>The coarse and fine granularity limits represent the largest and smallest feature sizes that PatMax uses to locate patterns in a run-time image. PatMax uses a range of granularity values within the range you specify. </PARA><PARA><see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.GrainLimitCoarse" /> must be greater than or equal to <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.GrainLimitFine" />.  Setting <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.GrainLimitCoarse" /> less than <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.GrainLimitFine" /> sets <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.GrainLimitFine" /> to the new <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.GrainLimitCoarse" /> value.</PARA><NOTE>Changing this property causes this <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignPattern" /> to become untrained.</NOTE><DEFAULT>1.0</DEFAULT></remarks><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignPattern_GrainLimitFine--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGrainLimitFine" /></li></ul></event><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. The new value was greater than <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.GrainLimitCoarse" /> so it was set to the new value.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_PMAlignPattern_GrainLimits --></ul></event><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes and the pattern was untrained.
The new value may also have been greater than <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.GrainLimitCoarse" />, in which case its value was set to the new value.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_PMAlignPattern_GrainLimits --><!--FA:cogFA_PMAlignPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoIDs" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsCoarse" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsFine" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoStrings" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImage" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImageMask" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternShapeModels" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
            The supplied value less than 1.0 or greater than 25.5.
            </para></exception><summary>Fine granularity limit.  User can manually set the grain limit if GrainLimitAutoSelect is false.  Valid range is 1.0 to 25.5 inclusive.  Coarse must be greater than or equal to fine.  Setting fine greater than coarse will also set coarse to the new value.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.GrainLimitCoarse"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
            The supplied value less than 1.0 or greater than 25.5.
            </para></exception><remarks><PARA>Coarse <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="feature_size_and_pattern_granularity">granularity</see> limit.  You  can manually set the grain limit if <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.GrainLimitAutoSelect" /> is False. The valid range is from 1.0 to 25.5.</PARA><PARA><PARA>The coarse and fine granularity limits represent the largest and smallest feature sizes that PatMax uses to locate patterns in a run-time image. PatMax uses a range of granularity values within the range you specify.</PARA><see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.GrainLimitCoarse" /> must be greater than or equal to <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.GrainLimitFine" />.  Setting <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.GrainLimitCoarse" /> less than <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.GrainLimitFine" /> sets <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.GrainLimitFine" /> to the new <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.GrainLimitCoarse" /> value.</PARA><NOTE>Changing this property causes this <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignPattern" /> to become untrained.</NOTE><DEFAULT>4.0</DEFAULT></remarks><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignPattern_GrainLimitCoarse--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGrainLimitCoarse" /></li></ul></event><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes. The new value was less than <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.GrainLimitFine" /> so it was set to the new value.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_PMAlignPattern_GrainLimits --></ul></event><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes and the pattern was untrained.
The new value may also have been less than <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.GrainLimitFine" />, in which case its value was set to the new value.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_PMAlignPattern_GrainLimits--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGrainLimitAutoSelect" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGrainLimitCoarse" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGrainLimitFine" /></li><!--FA:cogFA_PMAlignPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoIDs" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsCoarse" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsFine" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoStrings" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImage" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImageMask" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternShapeModels" /></li></ul></event><summary>Coarse granularity limit.  User can manually set the grain limit if GrainLimitAutoSelect is false.  Valid range is 1.0 to 25.5 inclusive.  Coarse must be greater than or equal to fine.  Setting coarse less than fine will also set fine to the new value.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.GrainLimitAutoSelect"><remarks><PARA>If true then PMAlign will automatically generate grain limits during training.  If false then the values stored in the pattern prior to training will be used.</PARA><PARA>The <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="feature_size_and_pattern_granularity">granularity</see> limits control the size of features detected by PMAlign. For more information, see <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.GrainLimitCoarse" /> and <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.GrainLimitFine" />.</PARA><NOTE>Changing this property causes this <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignPattern" /> to become untrained.</NOTE><DEFAULT>True</DEFAULT></remarks><summary>If true then PMAlign will automatically generate grain limits during training.  If false then the values stored in the pattern prior to training will be used.</summary><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignPattern_GrainLimitAutoSelect--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGrainLimitAutoSelect" /></li></ul></event><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes and the pattern was untrained. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_PMAlignPattern_GrainLimits--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGrainLimitAutoSelect" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGrainLimitCoarse" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGrainLimitFine" /></li><!--FA:cogFA_PMAlignPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoIDs" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsCoarse" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsFine" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoStrings" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImage" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImageMask" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternShapeModels" /></li></ul></event><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.PMAlign

Private myPattern As CogPMAlignPattern
Private myParams As CogPMAlignRunParams
Private myResults As CogPMAlignResults
    
Private Sub doTrain()

  myPattern = New CogPMAlignPattern
  myParams = New CogPMAlignRunParams
  myResults = New CogPMAlignResults

  myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick
  myPattern.TrainMode = CogPMAlignTrainModeConstants.Image

  myPattern.TrainImage = anImage
  myPattern.TrainRegion = trainRect
  myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox
  myPattern.Origin.TranslationX = trainRect.CenterX
  myPattern.Origin.TranslationY = trainRect.CenterY

  myPattern.GrainLimitAutoSelect = True
  myPattern.GrainLimitCoarse = 6.1
  myPattern.GrainLimitFine = 1.5


  myPattern.Train()
end sub
     </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.PMAlign;

private CogPMAlignPattern myPattern;
private CogPMAlignRunParams myParams;
private CogPMAlignResults myResults;

private void doTrain()
{
  myPattern = new CogPMAlignPattern();
  myParams = new CogPMAlignRunParams();
  myResults =new CogPMAlignResults();

  myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick;
  myPattern.TrainMode = CogPMAlignTrainModeConstants.Image;

  myPattern.TrainImage = anImage;
  myPattern.TrainRegion = trainRect;
  myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox;
  myPattern.Origin.TranslationX = trainRect.CenterX;
  myPattern.Origin.TranslationY = trainRect.CenterY;

  myPattern.GrainLimitAutoSelect = true;
  myPattern.GrainLimitCoarse = 6.1;
  myPattern.GrainLimitFine = 1.5;

  myPattern.Train();
}
    </code></example></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.HighSensitivityParameter"><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignPattern_HighSensitivityParameter--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfHighSensitivityParameter" /></li></ul></event><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes and the pattern was untrained.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_PMAlignPattern_HighSensitivityParameter--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfHighSensitivityParameter" /></li><!--FA:cogFA_PMAlignPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoIDs" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsCoarse" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsFine" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoStrings" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImage" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImageMask" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternShapeModels" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is less than 1.0 or greater than 10.0.</para></exception><summary>Control the sensitivity parameter used by PatMax when TrainAlgorithm is cogPMAlignTrainAlgorithmPatMaxHighSensitivity.</summary><remarks><PARA>The <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="sensitivity_parameter">noise rejection level</see> to apply when 
	using the <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="high_sensitivity_mode">cogPMAlignTrainAlgorithmPatMaxHighSensitivity</see> 
	algorithm.</PARA><DEFAULT>2.0</DEFAULT></remarks><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.PMAlign

Private myPattern As CogPMAlignPattern
Private myParams As CogPMAlignRunParams
Private myResults As CogPMAlignResults
    
Private Sub doTrain()

  myPattern = New CogPMAlignPattern
  myParams = New CogPMAlignRunParams
  myResults = New CogPMAlignResults

  myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick
  myPattern.TrainMode = CogPMAlignTrainModeConstants.Image

  myPattern.HighSensitivityParameter = 2.1
 
  myPattern.TrainImage = anImage
  myPattern.TrainRegion = trainRect
  myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox
  myPattern.Origin.TranslationX = trainRect.CenterX
  myPattern.Origin.TranslationY = trainRect.CenterY

 

  myPattern.Train()
end sub
     </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.PMAlign;

private CogPMAlignPattern myPattern;
private CogPMAlignRunParams myParams;
private CogPMAlignResults myResults;

private void doTrain()
{
  myPattern = new CogPMAlignPattern();
  myParams = new CogPMAlignRunParams();
  myResults =new CogPMAlignResults();

  myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick;
  myPattern.TrainMode = CogPMAlignTrainModeConstants.Image;

  myPattern.HighSensitivityParameter = 2.1;

  myPattern.TrainImage = anImage;
  myPattern.TrainRegion = trainRect;
  myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox;
  myPattern.Origin.TranslationX = trainRect.CenterX;
  myPattern.Origin.TranslationY = trainRect.CenterY;

 
  myPattern.Train();
}
    </code></example></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.ExpectedDeformationRate"><summary>The expected deformation rate of the PatFlex pattern.  This has no effect unless the TrainAlgorithm is PatFlex.</summary><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignPattern_ExpectedDeformationRate--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfExpectedDeformationRate" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is less than 0.0 or greater than 1.0.</para></exception><remarks><PARA>The expected 
	<see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="expected_and_maximum_deformation_rate">deformation rate</see> 
	 of the PatFlex pattern. This has no effect unless you are using the PatFlex algorithm.</PARA><DEFAULT>0.3</DEFAULT></remarks><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.PMAlign

Private myPattern As CogPMAlignPattern
Private myParams As CogPMAlignRunParams
Private myResults As CogPMAlignResults
    
Private Sub doTrain()

  myPattern = New CogPMAlignPattern
  myParams = New CogPMAlignRunParams
  myResults = New CogPMAlignResults

  myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatFlex
  myPattern.ExpectedDeformationRate = 0.1
  myPattern.TrainMode = CogPMAlignTrainModeConstants.Image

  myPattern.TrainImage = anImage
  myPattern.TrainRegion = trainRect
  myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox
  myPattern.Origin.TranslationX = trainRect.CenterX
  myPattern.Origin.TranslationY = trainRect.CenterY

  myPattern.Train()
end sub
     </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.PMAlign;

private CogPMAlignPattern myPattern;
private CogPMAlignRunParams myParams;
private CogPMAlignResults myResults;

private void doTrain()
{
  myPattern = new CogPMAlignPattern();
  myParams = new CogPMAlignRunParams();
  myResults =new CogPMAlignResults();

  myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatFlex;
  myPattern.ExpectedDeformationRate = 0.1;
  myPattern.TrainMode = CogPMAlignTrainModeConstants.Image;

  myPattern.TrainImage = anImage;
  myPattern.TrainRegion = trainRect;
  myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox;
  myPattern.Origin.TranslationX = trainRect.CenterX;
  myPattern.Origin.TranslationY = trainRect.CenterY;

  myPattern.Train();
}
    </code></example></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Elasticity"><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignPattern_Elasticity--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfElasticity" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="Value" /> is less than zero.</para></exception><remarks><PARA>The elasticity value is the amount of feature variance, in pixels, that PMAlign allows.  By default, feature-to-feature variance in the location of features within a pattern reduce both score and accuracy. If you specify a nonzero value for elasticity, PMAlign allows individual features to vary in position by the value you specify. </PARA><PARA>For more information, see the theory discussion of  <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="elasticity">elasticity</see>.</PARA><DEFAULT>0.0</DEFAULT></remarks><summary>The elasticity value is the amount of feature variance, in pixels, that PMAlign allows.  Setting a nonzero elasticity value permits PMAlign to find pattern instances with nonlinear geometric variation to be found.</summary><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.PMAlign

Private myPattern As CogPMAlignPattern
Private myParams As CogPMAlignRunParams
Private myResults As CogPMAlignResults
    
Private Sub doTrain()

  myPattern = New CogPMAlignPattern
  myParams = New CogPMAlignRunParams
  myResults = New CogPMAlignResults

  myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick
  myPattern.TrainMode = CogPMAlignTrainModeConstants.Image

  myPattern.Elasticity = 2.1
  myPattern.TrainImage = anImage
  myPattern.TrainRegion = trainRect
  myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox
  myPattern.Origin.TranslationX = trainRect.CenterX
  myPattern.Origin.TranslationY = trainRect.CenterY

  myPattern.Train()
end sub
     </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.PMAlign;

private CogPMAlignPattern myPattern;
private CogPMAlignRunParams myParams;
private CogPMAlignResults myResults;

private void doTrain()
{
  myPattern = new CogPMAlignPattern();
  myParams = new CogPMAlignRunParams();
  myResults =new CogPMAlignResults();

  myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick;
  myPattern.TrainMode = CogPMAlignTrainModeConstants.Image;

  myPattern.Elasticity = 2.1;

  myPattern.TrainImage = anImage;
  myPattern.TrainRegion = trainRect;
  myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox;
  myPattern.Origin.TranslationX = trainRect.CenterX;
  myPattern.Origin.TranslationY = trainRect.CenterY;

  myPattern.Train();
}
    </code></example></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.IgnorePolarity"><remarks><PARA>If true, <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="pattern_polarity">pattern polarity</see>  is ignored.  If false, only patterns with polarity matching the trained pattern will be found.</PARA><DEFAULT>False</DEFAULT></remarks><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignPattern_IgnorePolarity--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfIgnorePolarity" /></li></ul></event><summary>If true, pattern polarity is ignored.  If false, only patterns with polarity matching the trained pattern will be found.</summary><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.PMAlign

Private myPattern As CogPMAlignPattern
Private myParams As CogPMAlignRunParams
Private myResults As CogPMAlignResults

myPattern = New CogPMAlignPattern
myParams = New CogPMAlignRunParams

Private Sub doTrain()
	myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick
	myPattern.TrainMode = CogPMAlignTrainModeConstants.Image
	
	myPattern.IgnorePolarity = True
	
	myPattern.TrainImage = anImage
	myPattern.TrainRegion = aRect
	myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox
	myPattern.Origin.TranslationX = aRect.CenterX
	myPattern.Origin.TranslationY = aRect.CenterY
	
	myPattern.Train()
End Sub
    </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.PMAlign;

private CogPMAlignPattern myPattern;
private CogPMAlignRunParams myParams;
private CogPMAlignResults myResults;

myPattern = new CogPMAlignPattern();
myParams = new CogPMAlignRunParams();

private void doTrain()
{
	myPattern.TrainAlgorithm = Cognex.VisionPro.PMAlign.CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick;
	myPattern.TrainMode = Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants.Image;
	
	myPattern.IgnorePolarity = true;
	
	myPattern.TrainImage = anImage;
	myPattern.TrainRegion = aRect;
	myPattern.TrainRegionMode = Cognex.VisionPro.CogRegionModeConstants.PixelAlignedBoundingBox;
	myPattern.Origin.TranslationX = aRect.CenterX;
	myPattern.Origin.TranslationY = aRect.CenterY;
	
}
    </code></example></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignPattern.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignPattern.PCPLoadFromFile(System.String)"><param name="filename"><PARA /></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="filename" />  is an empty string.
            </para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogFileOpenException" cgnxHRESULT="E_Cog_FileOpen"><para><paramref name="filename" />  could not be opened.
            </para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogPMAlignInvalidPCPException" cgnxHRESULT="E_CogPMAlign_InvalidPCP"><para><paramref name="filename" />  contains an invalid PCP string. If this error occurs, any existing PCP string is lost and the contents of the <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.PCPString" /> are undefined.
            </para></exception><summary>Customizes this PMAlign pattern using the customization string (PCP) in the file specified by Filename.</summary><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="singleState"><para>
        
Fires when the string changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignPattern_PCPString--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfPCPString" /></li></ul></event><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="multiState"><para>
        
Fires when the string changes and the pattern was untrained.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_PMAlignPattern_PCPString--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfPCPString" /></li><!--FA:cogFA_PMAlignPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoIDs" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsCoarse" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsFine" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoStrings" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImage" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImageMask" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternShapeModels" /></li></ul></event><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="multiState"><para>
        
Fires when the string was not changed successfully
	(<see cref="T:Cognex.VisionPro.Exceptions.CogPMAlignInvalidPCPException" />), but the pattern was untrained.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_PMAlignPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoIDs" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsCoarse" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsFine" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoStrings" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImage" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImageMask" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternShapeModels" /></li></ul></event><remarks><PARA>Customizes this PMAlign pattern using the customization string (PCP) in the file specified by Filename.</PARA><NOTE>Calling this function causes this <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignPattern" /> to become untrained.</NOTE></remarks></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignPattern.ImportFromCvlArchive(System.String)"><param name="filename"><PARA>Name of the CVL archive.</PARA></param><summary>Loads a ccPMAlignPattern class from the specified CVL archive file into this CogPMAlignPattern class.  The archive should contain only a single ccPMAlignPattern class.  Non-CVL parameters are set to their default VisionPro values.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="filename" /> is  NULL.
            </para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogFileOpenException" cgnxHRESULT="E_Cog_FileOpen"><para><paramref name="filename" /> could not be opened.
            </para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogPMAlignImportFromCVLErrorException" cgnxHRESULT="E_CogPMAlign_ImportFromCVLError"><para><paramref name="filename" /> could not be read.
            </para></exception><remarks><PARA>Loads a ccPMAlignPattern class from the specified CVL archive file into this CogPMAlignPattern class. Non-CVL parameters are set to their default VisionPro values.</PARA></remarks><PARA><see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignPattern" /> suspends events and uses the properties of <DISPLAY IFACE="." /> to
set the data imported from the CVL archive. If the CVL archive contained a pattern, <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignPattern" />
calls <see cref="M:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Train" /> to train the pattern. After the archive has been completely imported,
<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignPattern" /> resumes events. This means that this method generates a single event with
a state ID <see cref="T:Cognex.VisionPro.CogStateIDs">cogState_MoreThanOneStateIDChanged</see>
and the combination of functional areas of the suspended events.</PARA><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="multiState"><para>
        
Fires after importing the archive.
</para><para>The following state flags may be affected:</para><ul /></event><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="singleState"><para>
        
Fires if importing the CVL archive failed and the original pattern had to be retrained. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignPattern_TrainImage--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrainImage" /></li></ul></event></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignPattern.CreateGraphicsCoarse(Cognex.VisionPro.CogColorConstants)"><param name="color"><PARA>A <see cref="T:Cognex.VisionPro.CogColorConstants" /> giving the color with which to render these features.</PARA></param><returns><PARA>An <see cref="T:Cognex.VisionPro.CogGraphicCollection" /> interface for the returned list of graphics. </PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNotTrainedException" cgnxHRESULT="E_CogOperator_NotTrained"><para>
            This pattern is not trained.
            </para></exception><remarks><PARA>Gets an <see cref="T:Cognex.VisionPro.CogGraphicCollection" /> object that contains a list of the feature boundary points trained for this <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignPattern" /> at the coarse granularity limit.</PARA></remarks><summary>Gets a collection of graphics that can be used to display the coarse pattern features.</summary><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.PMAlign

Private myPattern As New CogPMAlignPattern
Private myParams As New CogPMAlignRunParams
Private myResults As CogPMAlignResults
    
Private Sub doTrain()
 
    Dim i As Integer
    Dim grainColl As CogGraphicCollection

    myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick
    myPattern.TrainMode = CogPMAlignTrainModeConstants.Image

    myPattern.TrainImage = anImage
    myPattern.TrainRegion = trainRect
    myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox
    myPattern.Origin.TranslationX = trainRect.CenterX
    myPattern.Origin.TranslationY = trainRect.CenterY

    myPattern.Train()
    CogDisplay1.Image = myPattern.GetTrainedPatternImage
    grainColl = myPattern.CreateGraphicsCoarse(CogColorConstants.Yellow)
    For i = 0 To grainColl.Count - 1
        CogDisplay1.StaticGraphics.Add(grainColl.Item(i), "")
    Next

end sub
     </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.PMAlign;

private CogPMAlignPattern myPattern = new CogPMAlignPattern();
private CogPMAlignRunParams myParams =new CogPMAlignRunParams();
private CogPMAlignResults myResults;

private void doTrain()
{
    int i;
    CogGraphicCollection grainColl;

    myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick;
    myPattern.TrainMode = CogPMAlignTrainModeConstants.Image;

    myPattern.TrainImage = anImage;
    myPattern.TrainRegion = trainRect;
    myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox;
    myPattern.Origin.TranslationX = trainRect.CenterX;
    myPattern.Origin.TranslationY = trainRect.CenterY;

    myPattern.Train();
    CogDisplay1.Image = myPattern.GetTrainedPatternImage();
    grainColl = myPattern.CreateGraphicsCoarse(CogColorConstants.Yellow);
    for( i = 0; i &lt; grainColl.Count; i++ )
      {
          CogDisplay1.StaticGraphics.Add(grainColl[i], "");
      }
}
    </code></example></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignPattern.CreateGraphicsFine(Cognex.VisionPro.CogColorConstants)"><param name="color"><PARA>A <see cref="T:Cognex.VisionPro.CogColorConstants" /> giving the color with which to render these features.</PARA></param><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNotTrainedException" cgnxHRESULT="E_CogOperator_NotTrained"><para>
            This pattern is not trained.
            </para></exception><remarks><PARA>Gets an <see cref="T:Cognex.VisionPro.CogGraphicCollection" /> object that contains a list of the feature boundary points trained for this <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignPattern" /> at the fine granularity limit.</PARA></remarks><returns><PARA>An <see cref="T:Cognex.VisionPro.CogGraphicCollection" /> interface for the returned list of graphics. </PARA></returns><summary>Gets a collection of graphics that can be used to display the fine pattern features.</summary><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.PMAlign

Private myPattern As New CogPMAlignPattern
Private myParams As New CogPMAlignRunParams
Private myResults As CogPMAlignResults
    
Private Sub doTrain()
 
    Dim i As Integer
    Dim grainColl As CogGraphicCollection

    myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick
    myPattern.TrainMode = CogPMAlignTrainModeConstants.Image

    myPattern.TrainImage = anImage
    myPattern.TrainRegion = trainRect
    myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox
    myPattern.Origin.TranslationX = trainRect.CenterX
    myPattern.Origin.TranslationY = trainRect.CenterY

    myPattern.Train()
    CogDisplay1.Image = myPattern.GetTrainedPatternImage
    grainColl = myPattern.CreateGraphicsFine(CogColorConstants.Yellow)
    For i = 0 To grainColl.Count - 1
        CogDisplay1.StaticGraphics.Add(grainColl.Item(i), "")
    Next

end sub
     </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.PMAlign;

private CogPMAlignPattern myPattern = new CogPMAlignPattern();
private CogPMAlignRunParams myParams =new CogPMAlignRunParams();
private CogPMAlignResults myResults;

private void doTrain()
{
    int i;
    CogGraphicCollection grainColl;

    myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick;
    myPattern.TrainMode = CogPMAlignTrainModeConstants.Image;

    myPattern.TrainImage = anImage;
    myPattern.TrainRegion = trainRect;
    myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox;
    myPattern.Origin.TranslationX = trainRect.CenterX;
    myPattern.Origin.TranslationY = trainRect.CenterY;

    myPattern.Train();
    CogDisplay1.Image = myPattern.GetTrainedPatternImage();
    grainColl = myPattern.CreateGraphicsFine(CogColorConstants.Yellow);
    for( i = 0; i &lt; grainColl.Count; i++ )
      {
          CogDisplay1.StaticGraphics.Add(grainColl[i], "");
      }
}
    </code></example></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignPattern.GetInfoStrings"><returns><PARA>An <see cref="T:Cognex.VisionPro.CogStringCollection" /> containing the results.</PARA></returns><remarks><PARA>Train-time <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="pattern_training_diagnostics">diagnostic message</see> containing information about this pattern.  If there are no messages then the collection will be empty.  The corresponding message id(s) can be obtained from <see cref="M:Cognex.VisionPro.PMAlign.CogPMAlignPattern.GetInfoIDs" />.</PARA></remarks><summary>Gets train-time diagnostic message text string(s) for this pattern.  If there are no messages then the collection will be empty.  The corresponding message ID(s) can be obtained from GetInfoIDs.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignPattern.GetTrainedPatternImage"><remarks><PARA>Gets an <see cref="T:Cognex.VisionPro.CogImage8Grey" /> containing the region of the <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainImage" /> that was used to train PMAlign. This image may contain a larger portion of the <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainImage" /> than just the <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainRegion" /> depending on the <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainRegionMode" />.</PARA></remarks><summary>Gets the image used to train the PMAlign pattern.  This is the smallest possible sub-image of TrainImage that contains the TrainRegion.  Actual features within the sub-image that are trained depends on the TrainRegionMode and TrainImageMask.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNotTrainedException" cgnxHRESULT="E_CogOperator_NotTrained"><para>
            This pattern is not trained.
            </para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogPMAlignWrongTrainModeException" cgnxHRESULT="E_CogPMAlign_WrongTrainMode"><para><see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainMode" />  is
	            	<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants">ShapeModelsWithTransform</see>.
       	</para></exception><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.PMAlign

Private myPattern As New CogPMAlignPattern
Private myParams As New CogPMAlignRunParams
Private myResults As CogPMAlignResults
    
Private Sub doTrain()


  myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick
  myPattern.TrainMode = CogPMAlignTrainModeConstants.Image

  myPattern.TrainImage = anImage
  myPattern.TrainRegion = trainRect
  myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox
  myPattern.Origin.TranslationX = trainRect.CenterX
  myPattern.Origin.TranslationY = trainRect.CenterY

  myPattern.Train()
  CogDisplay1.Image = myPattern.GetTrainedPatternImage

end sub
     </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.PMAlign;

private CogPMAlignPattern myPattern = new CogPMAlignPattern();
private CogPMAlignRunParams myParams =new CogPMAlignRunParams();
private CogPMAlignResults myResults;

private void doTrain()
{

  myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick;
  myPattern.TrainMode = CogPMAlignTrainModeConstants.Image;


  myPattern.TrainImage = anImage;
  myPattern.TrainRegion = trainRect;
  myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox;
  myPattern.Origin.TranslationX = trainRect.CenterX;
  myPattern.Origin.TranslationY = trainRect.CenterY;

  myPattern.Train();
  CogDisplay1.Image = myPattern.GetTrainedPatternImage();
}
    </code></example></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignPattern.GetTrainedPatternImageMask"><summary>Gets the actual mask image used to train the current pattern.  This mask is the combination of the TrainImageMask and any mask that may be required by TrainRegionMode.  This mask is the same size as the image returned by GetTrainedPatternImage.</summary><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNotTrainedException" cgnxHRESULT="E_CogOperator_NotTrained"><para>
            This pattern is not trained.
            </para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogPMAlignWrongTrainModeException" cgnxHRESULT="E_CogPMAlign_WrongTrainMode"><para><see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainMode" />  is
	            	<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants">ShapeModelsWithTransform</see> or
	            	<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants">ShapeModelsWithImage</see>.
       	</para></exception><remarks><PARA>Image containing masking information required to apply the <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainRegion" /> to the <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainImage" />  based on the TrainRegionMode.  This mask image will also contain masking information from the TrainImageMask provided by the user.</PARA></remarks></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignPattern.GetTrainedPatternShapeModels"><summary>Gets the actual shape models used to train the current pattern.  The user provided shape models are clipped using the pixel aligned bounding box of TrainRegion when TrainRegion is not nothing.</summary><remarks><PARA>Gets the actual shape models used to train the current pattern. Shape models are clipped using the pixel-aligned bounding box of <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainRegion" /> when <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainRegion" /> is not Nothing.</PARA></remarks><returns><PARA>The collection of shape models.</PARA></returns><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNotTrainedException" cgnxHRESULT="E_CogOperator_NotTrained"><para>
            This pattern is not trained.
            </para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogPMAlignWrongTrainModeException" cgnxHRESULT="E_CogPMAlign_WrongTrainMode"><para><see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainMode" />  is neither
	            	<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants">ShapeModelsWithTransform</see> or
	            	<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants">ShapeModelsWithImage</see>.
       	</para></exception><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.PMAlign

Private myPattern As New CogPMAlignPattern
Private myParams As New CogPMAlignRunParams
Private myResults As CogPMAlignResults
    
Private Sub doTrain()
  Dim affRect As New CogRectangleAffine
  Dim newTransform As New CogTransform2DLinear
  Dim shapeModel As ICogShapeModel
  Dim i As Integer

  myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick
  myPattern.TrainMode = CogPMAlignTrainModeConstants.ShapeModelsWithImage

  affRect.SetFromRectangle(trainRect, newTransform)
  shapeModel = affRect.MakeShapeModel(1, CogShapeModelPolarityConstants.NegativeOne, True)

  myPattern.TrainShapeModels.Add(shapeModel)

  myPattern.TrainImage = anImage
  myPattern.TrainRegion = Nothing
  myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox
  myPattern.Origin.TranslationX = trainRect.CenterX
  myPattern.Origin.TranslationY = trainRect.CenterY

  myPattern.Train()
  CogDisplay1.Image = myPattern.GetTrainedPatternImage
  For i = 0 To myPattern.GetTrainedPatternShapeModels.Count - 1
      CogDisplay1.StaticGraphics.Add(CType(myPattern.GetTrainedPatternShapeModels.Item(i).Shape, ICogGraphic), "")
  Next
end sub
     </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.PMAlign;

private CogPMAlignPattern myPattern = new CogPMAlignPattern();
private CogPMAlignRunParams myParams =new CogPMAlignRunParams();
private CogPMAlignResults myResults;

private void doTrain()
{
  CogRectangleAffine affRect = new CogRectangleAffine();
  CogTransform2DLinear newTransform = new CogTransform2DLinear();
  ICogShapeModel shapeModel; 
  int i;

  myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick;
  myPattern.TrainMode = CogPMAlignTrainModeConstants.ShapeModelsWithImage;

  affRect.SetFromRectangle(trainRect, newTransform);
  shapeModel = affRect.MakeShapeModel(1, CogShapeModelPolarityConstants.NegativeOne, true);

  myPattern.TrainShapeModels.Add(shapeModel);

  myPattern.TrainImage = anImage;
  myPattern.TrainRegion = null;
  myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox;
  myPattern.Origin.TranslationX = trainRect.CenterX;
  myPattern.Origin.TranslationY = trainRect.CenterY;
  myPattern.Train();
  CogDisplay1.Image = myPattern.GetTrainedPatternImage();
  for( i=0; i &lt; myPattern.GetTrainedPatternShapeModels().Count; i++)
    {
      CogDisplay1.StaticGraphics.Add((ICogGraphic) myPattern.GetTrainedPatternShapeModels().get_Item(i).Shape, "");
    }
}
    </code></example></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Train"><summary>Trains this PMAlign pattern.  If the pattern is already trained then it will be untrained and retrained.</summary><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="multiState"><para>
        
Fires when the pattern is trained.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_PMAlignPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoIDs" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsCoarse" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsFine" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoStrings" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImage" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImageMask" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternShapeModels" /></li></ul></event><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="multiState"><para>
        
Fires when the pattern is trained and grain limits have changed..
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_PMAlignPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoIDs" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsCoarse" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsFine" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoStrings" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImage" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImageMask" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternShapeModels" /></li><!--FA:cogFA_PMAlignPattern_GrainLimits--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGrainLimitAutoSelect" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGrainLimitCoarse" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGrainLimitFine" /></li></ul></event><exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" cgnxHRESULT="E_Cog_SecurityViolation"><para>Security is not enabled for this vision tool. See 
<see cref="u:Programming.Tools.Theory.Security" cgnxAnchor="resolving_securityrelated_error_messages">Resolving Security-Related Error Messages</see>
for more information.
Note that there are separate license bits for the PatQuick and PatMax algorithm, and for shape training.
</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainImage" /> is NULL.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainImage" /> is not allocated.
		Only thrown if
		<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainMode" /> is 
		<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants">Image</see>.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>
		The selected space of the <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainRegion" /> is not a valid space of the <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainImage" /> or
		it is a nonqualified space name and more than one instance of it exist in the space tree of 
		the <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainImage" />.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainRegion" /> falls 
		completely outside of <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainImage" />. (Clipping of the 
		train region by the input image is permitted.)
		Only thrown if
		<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainMode" /> is 
		<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants">Image</see>.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogPMAlignCanNotTrainException" cgnxHRESULT="E_CogPMAlign_CanNotTrain"><para><see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainImageMask" /> contains values in the range of 128 through 191 which are reserved for future use by 
		Cognex; the training image has no features; or no part of the supplied 
		<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainShapeModels" /> lies within the <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainRegion" />.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoTrainImageException" cgnxHRESULT="E_CogOperator_NoTrainImage"><para><see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainImage" /> is NULL. 
		Only thrown if
		<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainMode" /> is 
		<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants">Image</see> or 
		<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants">ShapeModelsWithImage</see>.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogPMAlignNoShapeModelsException" cgnxHRESULT="E_CogPMAlign_NoShapeModels"><para><see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainShapeModels" />  
		is either Nothing or empty.
		Only thrown if
		<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainMode" /> is 
		<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants">ShapeModelsWithImage</see> or 
		<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants">ShapeModelsWithTransform</see>.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogPMAlignBadWeightsException" cgnxHRESULT="E_CogPMAlign_BadWeights"><para> 
		None of the shape models in 
		<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainShapeModels" />  have effective 
		weights greater than 0.
		Only thrown if
		<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainMode" /> is 
		<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants">ShapeModelsWithImage</see> or 
		<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants">ShapeModelsWithTransform</see>.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogPMAlignModelTooLargeException" cgnxHRESULT="E_CogPMAlign_ModelTooLarge"><para><see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainShapeModels" />  contains an infinite shape such as a <see cref="T:Cognex.VisionPro.CogLine" />
		and 
		<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainRegion" /> is nothing. 
		Only thrown if
		<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainMode" /> is 
		<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants">ShapeModelsWithImage</see> or
		<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants">ShapeModelsWithTransform</see>.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogPMAlignUndefinedPolarityException" cgnxHRESULT="E_CogPMAlign_UndefinedPolarity"><para><see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainShapeModels" />  contains at least one shape model with an 
		indeterminate polarity and 
		<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.IgnorePolarity" /> is false. 
		Only thrown if
		<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainMode" /> is 
		<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants">ShapeModelsWithImage</see> or 
		<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants">ShapeModelsWithTransform</see>.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogNotImplementedException" cgnxHRESULT="E_Cog_NotImplemented"><para><see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainRegion" /> is not NULL, 
		<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainRegionMode" /> is 
		<see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBoxAdjustMask</see>, and 
		<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainMode" /> is 
		<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants">ShapeModelsWithImage</see> or 
		<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants">ShapeModelsWithTransform</see>.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageBadSelectedSpaceNameException" cgnxHRESULT="E_CogImage_BadSelectedSpaceName"><para>
		The selected space of <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainImage" /> is
		not valid in <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainImage" />'s coordinate space tree; 
		the selected space name is nonqualified and multiple instances of the name 
		appear in <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainImage" />'s coordinate space tree; or 
		the selected space name is not a legal space name.
		Only thrown if
		<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainMode" /> is 
		<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants">Image </see> or 
		<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants">ShapeModelsWithImage</see>.
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidShapeException" cgnxHRESULT="E_CogOperator_InvalidShape"><para>
		The selected space of a shape in <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainShapeModels" />
		is not valid in <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainImage" />'s coordinate space tree; 
		a shape's selected space name is nonqualified and multiple instances of the name 
		appear in <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainImage" />'s coordinate space tree; or 
		a shape's selected space name is not a legal space name.
		Only thrown if
		<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainMode" /> is 
		<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants">ShapeModelsWithImage</see>.
	</para></exception><remarks><PARA>Trains this PMAlign pattern.  If the pattern is already trained then it will be untrained and retrained.</PARA></remarks><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.PMAlign

Private myPattern As New CogPMAlignPattern
Private myParams As New CogPMAlignRunParams
Private myResults As CogPMAlignResults
    
Private Sub doTrain()


  myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick
  myPattern.TrainMode = CogPMAlignTrainModeConstants.Image

  myPattern.TrainImage = anImage
  myPattern.TrainRegion = trainRect
  myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox
  myPattern.Origin.TranslationX = trainRect.CenterX
  myPattern.Origin.TranslationY = trainRect.CenterY

 

  myPattern.Train()
end sub
     </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.PMAlign;

private CogPMAlignPattern myPattern = new CogPMAlignPattern();
private CogPMAlignRunParams myParams =new CogPMAlignRunParams();
private CogPMAlignResults myResults;

private void doTrain()
{

  myPattern.TrainAlgorithm = CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick;
  myPattern.TrainMode = CogPMAlignTrainModeConstants.Image;


  myPattern.TrainImage = anImage;
  myPattern.TrainRegion = trainRect;
  myPattern.TrainRegionMode = CogRegionModeConstants.PixelAlignedBoundingBox;
  myPattern.Origin.TranslationX = trainRect.CenterX;
  myPattern.Origin.TranslationY = trainRect.CenterY;

 
  myPattern.Train();
}
    </code></example></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Untrain"><summary>Untrain this pattern.</summary><remarks><PARA>Untrain this pattern.</PARA></remarks><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed" cgnxEvent="multiState"><para>
        
Fires when the pattern is untrained.
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_PMAlignPattern_TrainResults--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoIDs" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfTrained" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsCoarse" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfCreateGraphicsFine" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetInfoStrings" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImage" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternImageMask" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignPattern.SfGetTrainedPatternShapeModels" /></li></ul></event><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.PMAlign

Private myPattern As New CogPMAlignPattern
     
Private Sub doUnTrain()

  myPattern.UnTrain()
end sub
     </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.PMAlign;

private CogPMAlignPattern myPattern = new CogPMAlignPattern();

private void doTrain()
{
   myPattern.UnTrain();
}
    </code></example></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Execute(Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.ICogRegion,Cognex.VisionPro.PMAlign.CogPMAlignRunParams)"><param name="image"><PARA>The <see cref="T:Cognex.VisionPro.CogImage8Grey" /> in which to search.</PARA></param><param name="searchRegion"><PARA>The optional search region. If you do not specify a search region, the entire image is searched.</PARA></param><param name="runParams"><PARA>
The <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignRunParams" /> containing the parameters for this search.</PARA></param><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><paramref name="runParams" /> is NULL.</para><para><see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.RunMode" />
				is
				<see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunModeConstants.RefineStartPose" />
				and
				<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.StartPose" />
				is NULL.
			</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" cgnxHRESULT="E_Cog_SecurityViolation"><para>Security is not enabled for this vision tool. See 
<see cref="u:Programming.Tools.Theory.Security" cgnxAnchor="resolving_securityrelated_error_messages">Resolving Security-Related Error Messages</see>
for more information.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><paramref name="image" />  is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><paramref name="image" /> is not allocated.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNotTrainedException" cgnxHRESULT="E_CogOperator_NotTrained"><para>This pattern is not trained.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space of the <paramref name="searchRegion" /> is not a valid space of the Image.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><paramref name="searchRegion" /> falls completely outside of  <paramref name="image" />.  (Clipping of <paramref name="searchRegion" /> by <paramref name="image" /> is permitted.)</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogPMAlignPatMaxNotTrainedException" cgnxHRESULT="E_CogPMAlign_PatMaxNotTrained"><para>The pattern was not  trained for PatMax and  <paramref name="runParams" />.<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.RunAlgorithm" /> is PatMax.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogPMAlignPatQuickNotTrainedException" cgnxHRESULT="E_CogPMAlign_PatQuickNotTrained"><para>The PMAlign pattern was not trained for PatQuick and <paramref name="runParams" />.<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.RunAlgorithm" /> is PatQuick.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogPMAlignPatFlexNotTrainedException" cgnxHRESULT="E_CogPMAlign_PatFlexNotTrained"><para>The PMAlign pattern was not trained for PatFlex and <paramref name="runParams" />.<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.RunAlgorithm" /> is PatFlex.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException" cgnxHRESULT="E_Cog_TimeoutExpired"><para>The pattern location took longer than the value you specified for <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Timeout" />.</para></exception><remarks><PARA>
		When <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.RunMode" /> is
		<see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunModeConstants.SearchImage" />
		(the default mode),
		runs this PMAlign pattern on the given input image or region of interest
		using the supplied <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignRunParams" />. 
		A results collection is created and
		filled with <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignResult" /> classes
		in order of decreasing score.
	</PARA><PARA>
		When <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.RunMode" /> is
		<see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunModeConstants.RefineStartPose" />,
		refines the <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.StartPose" />
		instead of searching the image.
	</PARA></remarks><summary>Run this PMAlign pattern on the given region/image with the given runtime parameters.  A results collection will be created and filled with CogPMAlignResult classes in order of decreasing score.</summary><returns><PARA>The <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignResults" /> containing the results of the search.</PARA></returns><example><code lang="Visual Basic">
Imports Cognex.VisionPro
Imports Cognex.VisionPro.PMAlign

Private myPattern As New CogPMAlignPattern
Private myParams As New CogPMAlignRunParams
Private myResults As CogPMAlignResults
Private Sub doSearch()
  Dim i As Integer
  Dim cross As CogPointMarker


  myParams.ApproximateNumberToFind = 4
  myParams.AcceptThreshold = 0.5
  myParams.RunAlgorithm = CogPMAlignRunAlgorithmConstants.BestTrained

  myParams.ZoneAngle.Configuration = CogPMAlignZoneConstants.LowHigh
  myParams.ZoneAngle.High = Math.PI / 8
  myParams.ZoneAngle.Low = -(Math.PI / 4)

  myParams.ZoneScale.Configuration = CogPMAlignZoneConstants.LowHigh
  myParams.ZoneScale.High = 1.3
  myParams.ZoneScale.Low = 0.75


  If Not myPattern.Trained Then
      MsgBox("The pattern is not trained")
      Exit Sub
  End If

  myResults = myPattern.Execute(anImage, Nothing, myParams)

  For i = 0 To myResults.Count - 1
      cross = New CogPointMarker
      cross.Interactive = True
      cross.X = myResults.Item(i).GetPose.TranslationX
      cross.Y = myResults.Item(i).GetPose.TranslationY
      cross.TipText = "result " &amp; myResults.Item(i).ID &amp; ": " &amp; myResults.Item(i).Score
      If myResults.Item(i).Accepted Then
          cross.Color = CogColorConstants.Green
      Else
          cross.Color = CogColorConstants.Red
      End If

      CogDisplay1.InteractiveGraphics.Add(cross, "crosses", False)
  Next

  CogDisplay1.InteractiveGraphicTipsEnabled = True
End Sub
    </code><code lang="C#">
using Cognex.VisionPro;
using Cognex.VisionPro.PMAlign;

private CogPMAlignPattern myPattern = new CogPMAlignPattern();
private CogPMAlignRunParams myParams =new CogPMAlignRunParams();
private CogPMAlignResults myResults;

private void doSearch()
{
  int i=0;
  CogPointMarker cross; 


  myParams.ApproximateNumberToFind = 4;
  myParams.AcceptThreshold = 0.5;
  myParams.RunAlgorithm = CogPMAlignRunAlgorithmConstants.BestTrained;

  myParams.ZoneAngle.Configuration = CogPMAlignZoneConstants.LowHigh;
  myParams.ZoneAngle.High = Math.PI / 8;
  myParams.ZoneAngle.Low = -(Math.PI / 4);

  myParams.ZoneScale.Configuration = CogPMAlignZoneConstants.LowHigh;
  myParams.ZoneScale.High = 1.3;
  myParams.ZoneScale.Low = 0.75;


  if ( !myPattern.Trained ) 
  {
    MessageBox.Show("The pattern is not trained");
    return;     
  }

  myResults = myPattern.Execute(anImage, null, myParams);

  for( i=0; i &lt; myResults.Count; i++ )
  {
    cross = new CogPointMarker();
    cross.Interactive = true;
    cross.X = myResults[i].GetPose().TranslationX;
    cross.Y = myResults[i].GetPose().TranslationY;
    cross.TipText = "result " + myResults[i].ID + ": " + myResults[i].Score;
    if ( myResults[i].Accepted )
      cross.Color = CogColorConstants.Green;
    else
      cross.Color = CogColorConstants.Red;

    CogDisplay1.InteractiveGraphics.Add(cross, "crosses", false);
  }
  CogDisplay1.InteractiveGraphicTipsEnabled = true;
                                            
}
}
}
    </code></example></member><member name="E:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.PMAlign.CogPMAlignResult"><summary>Class which holds a single PMAlign result.  Each result corresponds to a found instance of the pattern.</summary><remarks><PARA>A <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignResult" /> interface provides access to information about the results of a PMAlign pattern location operation.</PARA></remarks></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignResult.#ctor(Cognex.VisionPro.PMAlign.CogPMAlignResult)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignResult.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignResult.FineStage"><summary>True if this result is from the fine stage of processing, and false if this result is from the coarse stage of processing.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignResult.MaxCoarseAcceptThreshold"><summary>Gets the maximum coarse accept threshold that would allow this result to be found.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignResult.OutsideRegionAreaProportion"><summary>The proportion of pattern area that is outside the search region.</summary><remarks><PARA>The proportion of the pattern area that is outside the run-time search region, provide
 <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.OutsideRegionThreshold" />  is enabled 
(has a value greater than 0.0). </PARA><PARA>If   <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.OutsideRegionThreshold" />
is not enabled, will return 0.0. This value is not available for the PatFlex algorithm, and will 
return -1.0 if the PatFlex algorithm is used.</PARA></remarks></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignResult.OutsideRegionFeatureProportion"><remarks><PARA>The proportion of the pattern features that is outside the run-time search region, provided 
 <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.OutsideRegionThreshold" />
 is enabled 
(has a value greater than 0.0). </PARA><PARA>If 
 <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.OutsideRegionThreshold" />
 is not enabled, will return 0.0. This value is not available for the PatFlex algorithm, and will 
return -1.0 if the PatFlex algorithm is used.</PARA></remarks><summary>The proportion of pattern features that is outside the search region.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignResult.UnwarpedInputImage"><summary>Gets run-time input image unwarped by the flex deformation found for this result. Returns Nothing (NULL) if PatFlex was not run or SaveDeformationInfo was not set to cogPMAlignFlexDeformationInfoTransformAndUnwarpData on last run.</summary><remarks><PARA>
	Gets a run-time input image unwarped by the flex deformation found for this result. Returns Nothing (NULL) if 
	<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.RunAlgorithm" /> was not
	<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignRunAlgorithmConstants">PatFlex</see> or 
	<see cref="P:Cognex.VisionPro.PMAlign.ICogPMAlignFlexRunParams.SaveDeformationInfo" /> was not
	<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignFlexDeformationInfoConstants">TransformAndUnwarpData</see> 
	on the last run.
</PARA><PARA>
The unwarped image will only be accurate near the location of the found pattern in the input image. The unwarped
image will include all pixel data from the input image, but some of the unwarped image may not have corresponding 
pixel data in the training image.
</PARA><PARA>
The root space of the output image's coordinate space tree is equivalent to the root space of the training image as
well as an additional space that is equivalent to the selected space of the training image (if it is different than the training image's
root space).
</PARA><NOTE>
Because of the nonlinear nature of the deformation used to produce the unwarped output image,
the root space of the output image  is not 
equivalent to the root space of the run-time input image.
</NOTE></remarks></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignResult.Contrast"><remarks><PARA><see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="contrast">Contrast</see> measurement of this result which is the average of the difference in pixel values across all feature boundaries.</PARA></remarks><summary>Contrast measurement of this result which is the average of the pixel gradient measurements across all feature boundaries.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignResult.Accepted"><summary>True if the result's Score was &gt;= the ICogPMAlignRunParams::AcceptThreshold.</summary><remarks><PARA>True if the result's Score was greater than or equal to the accept threshold that you specified using <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.AcceptThreshold" />.</PARA></remarks></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignResult.Clutter"><remarks><PARA>The <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="clutter_score">clutter score</see> is the number of extraneous features present in this result divided by the number of features in the trained pattern. The value ranges from 0.0 to infinity.  Only available for PatMax, -1 is always returned for PatQuick.</PARA></remarks><summary>Clutter score is the number of extraneous features present in this result divided by the number of features in the trained pattern. The value ranges from 0.0 to infinity.  Only available for PatMax, -1 is always returned for PatQuick.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignResult.Coverage"><remarks><PARA><see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="coverage_score">Coverage score</see> is the fraction (0.0 to 1.0) of features in the trained pattern that are found in this result.  Only available for PatMax, -1 is always returned for PatQuick.</PARA></remarks><summary>Coverage score is the fraction (0.0 to 1.0) of features in the trained pattern that are found in this result.  Only available for PatMax, -1 is always returned for PatQuick.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignResult.FitError"><summary>Quality measure that indicates the degree to which the found pattern features conform to the trained pattern, without regard to missing features.  Zero is a perfect fit.  Infinity is a poor fit.  Only available for PatMax, -1 returned for PatQuick.</summary><remarks><PARA><see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="fit_error">Fit error</see> is a measure of the degree to which the found pattern features match those of the trained pattern, without regard to missing features.   Zero is a perfect fit.  Infinity is a poor fit.  Only available for PatMax, -1 is returned for PatQuick.</PARA></remarks></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignResult.Score"><summary>Score for this result.  The score is between 0.0 and 1.0 with higher values indicating a closer match between the trained pattern and the pattern in the search image.</summary><remarks><PARA><see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="score">Score</see> for this result.  The score is between 0.0 and 1.0 with higher values indicating a closer match between the trained pattern and the pattern in the search image.</PARA></remarks></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignResult.ID"><summary>A unique ID used to identify this PMAlign result.  This ID also corresponds to the index of this result in the CogPMAlignResults to which this result belongs.</summary><remarks><PARA>A unique ID used to identify this PMAlign result.  This ID also corresponds to the index of this result in the CogPMAlignResults to which this result belongs.</PARA></remarks></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignResult.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignResult.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignResult.GetPose"><summary>Transform from "Pattern Space" to the selected space of the run-time input image.  This transform can be used to find any point relative to the pattern in the selected space of the run-time input image.</summary><returns><PARA>The <see cref="T:Cognex.VisionPro.CogTransform2DLinear" /> containing the pose.</PARA></returns><remarks><PARA>Transform from pattern space to the selected space of the run-time input image.  This transform can be used to find any point relative to the pattern in the selected space of the run-time input image.</PARA><PARA>
Mapping the point (0, 0) through the returned <see cref="T:Cognex.VisionPro.CogTransform2DLinear" /> returns the origin of the trained pattern in the input image's selected space.
</PARA></remarks></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignResult.GetRunImageFromTrainImagePerspectiveTransformElements"><summary>Cognex Internal Use Only.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignResult.GetInfoStrings"><summary>Gets run-time diagnostic message text string(s) for this individual PMAlign result.  If there are no messages then the collection will be empty.  The corresponding message ID(s) can be obtained from the GetInfoIDs method.</summary><remarks><PARA>Gets run-time <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="search_diagnostics">diagnostic message</see> text string(s) for this individual PMAlign result.  If there are no messages then the collection will be empty.  The corresponding message id(s) can be obtained from the <see cref="M:Cognex.VisionPro.PMAlign.CogPMAlignResult.GetInfoIDs" />.</PARA></remarks></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignResult.CreateResultGraphics(Cognex.VisionPro.PMAlign.CogPMAlignResultGraphicConstants)"><param name="graphicOptions"><PARA> The graphics options. Supply a value formed by ORing together one or more of the values defined in <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignResultGraphicConstants" />.</PARA></param><summary>Creates a composite result graphic containing child graphics specified by the GraphicOptions which is a bitwise combination of CogPMAlignResultGraphicConstants.</summary><returns><PARA>The <see cref="T:Cognex.VisionPro.CogCompositeShape" /> which contains the requested graphics.</PARA></returns><remarks><PARA>Gets a collection result graphics.  The GraphicOptions argument is used to select the type of graphics and is a bitwise combination of <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignResultGraphicConstants" />.</PARA><PARA>Graphics drawn in red indicate poor feature matches, graphics drawn in yellow indicate
fair feature matches, and graphics drawn in green indicate good matches.</PARA><PARA>This function only returns graphics if you specified the PatMax algorithm and if you set 
<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SaveMatchInfo" /> to True. Also, result graphics are not available for results that were loaded from
a persistence file.
</PARA></remarks></member><member name="T:Cognex.VisionPro.PMAlign.CogPMAlignResults"><remarks><PARA>Interface of a collection of PMAlign results  (<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignResult" />).</PARA></remarks><summary>Class which holds a collection of PMAlign results.  An instance of this class will be created and filled with individual results in order of decreasing score.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignResults.#ctor(Cognex.VisionPro.PMAlign.CogPMAlignResults)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignResults.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignResults.Item(System.Int32)"><param name="index">The index of the item to get or set.</param><summary>Gets or sets the item at the specified index.  In C#, this property is the indexer for the collection.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignResults.SyncRoot"><summary>Gets an object that can be used to synchronize access to this collection.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignResults.IsSynchronized"><summary>Gets a value indicating whether access to this collection is synchronized (thread-safe).</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignResults.Count"><summary>Gets the number of items contained in this collection.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignResults.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignResults.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignResults.CopyTo(System.Array,System.Int32)"><param name="array">The array into which to copy.</param><param name="index">The index from which to start copying.</param><summary>Copies the contents of this collection to an array.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignResults.IndexOf(Cognex.VisionPro.PMAlign.CogPMAlignResult)"><param name="value">The item whose index is desired.</param><summary>Gets the index of the given item.  If the item cannot be found -1 is returned.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignResults.GetInfoStrings"><summary>Run-time diagnostic message containing information about the PMAlign inspection which produced this collection of results.  If there are no messages then the collection will be empty.  The corresponding message ID(s) can be obtained from GetInfoIDs.</summary><remarks><PARA>Run-time <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="search_diagnostics">diagnostic message</see> or messages containing information about the PMAlign inspection which produced this collection of results.  If there are no messages then the collection will be empty. The corresponding message id(s) can be obtained from <see cref="M:Cognex.VisionPro.PMAlign.CogPMAlignResults.GetInfoIDs" />.</PARA></remarks></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignResults.GetTrainArea"><summary>Returns a copy of the train-pixel aligned rectangle enclosing the original train pattern.</summary><remarks><PARA>Returns a copy of the train-pixel aligned rectangle enclosing the original train pattern.</PARA><PARA>
	Returns the smallest training image pixel-aligned <see cref="T:Cognex.VisionPro.CogRectangle" /> 
	that encloses the original pattern. You can use this result in conjunction with
	<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignResult.UnwarpedInputImage" />.
	</PARA><PARA>The returned rectangle is in '@' space.  Note that '@' space
space in the unwarped image is arranged to be identical to the
'@' space of the training image.  This rectangle will sit
over the original train pattern area in the unwarped image.
This may be different than the original train region (if one 
 was provided) as it is pixel aligned.  
    </PARA></remarks><returns><PARA>The returned rectangle.</PARA></returns></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignResultsShared.#ctor(Cognex.VisionPro.PMAlign.CogPMAlignResultsShared)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignResultsShared.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignResultsShared.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignResultsShared.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="T:Cognex.VisionPro.PMAlign.CogPMAlignRunParams"><summary>Class which holds PMAlign run parameters.  The run parameters are used to control how PMAlign locates matching patterns in the run-time image.</summary><remarks><PARA>Interface for PMAlign run parameters.</PARA></remarks></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.#ctor(Cognex.VisionPro.PMAlign.CogPMAlignRunParams)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfApproximateNumberToFind"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ApproximateNumberToFind may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfAcceptThreshold"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by AcceptThreshold may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfContrastThreshold"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ContrastThreshold may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfScoreUsingClutter"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ScoreUsingClutter may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfTimeoutEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by TimeoutEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfTimeout"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Timeout may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfRunAlgorithm"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunAlgorithm may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfZoneAngle"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ZoneAngle may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfZoneScale"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ZoneScale may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfZoneScaleX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ZoneScaleX may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfZoneScaleY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ZoneScaleY may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfXYOverlap"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by XYOverlap may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfGrainLimitsUsePattern"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GrainLimitsUsePattern may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfGrainLimitCoarse"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GrainLimitCoarse may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfGrainLimitFine"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by GrainLimitFine may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfSaveMatchInfo"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SaveMatchInfo may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfSearchRegionMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SearchRegionMode may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfSearchImageMask"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SearchImageMask may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfSearchImageMaskOffsetX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SearchImageMaskOffsetX may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfSearchImageMaskOffsetY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SearchImageMaskOffsetY may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfOutsideRegionThreshold"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by OutsideRegionThreshold may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfRunMode"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunMode may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfStartPose"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by StartPose may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfEdgeThreshold"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by EdgeThreshold may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfAutoEdgeThresholdEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by AutoEdgeThresholdEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfCoarseAcceptThreshold"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CoarseAcceptThreshold may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfCoarseAcceptThresholdEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CoarseAcceptThresholdEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfMaxDeformationRate"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MaxDeformationRate may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfSmoothness"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Smoothness may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfRefinement"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Refinement may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfControlPointsX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ControlPointsX may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfControlPointsY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ControlPointsY may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfSaveDeformationInfo"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SaveDeformationInfo may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfDeformationFit"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DeformationFit may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfPartialMatchEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PartialMatchEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfPartialMatchCoverageThreshold"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PartialMatchCoverageThreshold may have changed.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.CoarseAcceptThresholdEnabled"><summary>Whether to use CoarseAcceptThreshold. Default is false.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.CoarseAcceptThreshold"><summary>If CoarseAcceptThresholdEnabled is true, then results whose score is greater than or equal to CoarseAcceptThreshold will be refined and then compared against AcceptThreshold. Otherwise result scores are only compared against AcceptThreshold. The legal range for CoarseAcceptThreshold is [0.0, 1.0] and the default is 0.33.</summary><remarks>CoarseAcceptThreshold must be less than or equal to AcceptThreshold. If CoarseAcceptThreshold is set to a value larger than AcceptThreshold then AcceptThreshold is automatically increased to the same value. Similarly, if AcceptThreshold is set to a value less than CoarseAcceptThreshold then CoarseAcceptThreshold is automatically reduced to the same value.</remarks></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.AutoEdgeThresholdEnabled"><summary>If true, user provided edge threshold will be used for training. If false, computed edge threshold will be used. Default value is false.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.EdgeThreshold"><exception cref="T:System.ArgumentException">If you attempt to set this to a value less than zero or greater than 255.</exception><summary>Run-time edge threshold, under which, edges will be ignored. Valid value range is from 0.0 to 255.0. Default value is 5.0.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.OwnedFlexParams"><remarks><PARA>Returns a reference to the runtime parameters specific to the PatFlex algorithm. The reference is simply another interface to this object.</PARA></remarks><summary>Gets the runtime parameters specific to the PatFlex algorithm.  These parameters are owned by this object, but are conveniently grouped together inside the returned interface.</summary><value>An interface containing the runtime parameters specific to the PatFlex algorithm.</value></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.StartPose"><summary>Transform that defines the starting model pose within the input image.</summary><remarks><para>
			The start pose is a two-dimensional linear transformation the defines
			the location of the model within the input image.
		</para><para>
			When <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.RunMode" />
			is
			<see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunModeConstants.RefineStartPose" />,
			the PatMax Align tool refines the pose rather than searching the image for instances of the model.
		</para><para>
			This property is ignored if <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.RunMode" />
			is
			<see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunModeConstants.SearchImage" />.
		</para></remarks></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.RunMode"><summary>The mode in which this PMAlign pattern will be run.</summary><remarks><para>
			Use this property to specify whether the PatMax Align tool
			searches the image for the trained pattern or refines the
			<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.StartPose">start pose</see>.
		</para><DEFAULT><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunModeConstants.SearchImage" /></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.OutsideRegionThreshold"><remarks><PARA>Specifies the proportion of features in the trained pattern that can be outside the search region without affecting score.</PARA><DEFAULT>
0.0
</DEFAULT></remarks><summary>Specifies the proportion of features that can be outside the search region without affecting score. The value must be set to 0 when using PatFlex or PatMaxPerspective train algorithm.</summary><exception cref="T:System.ArgumentException">If you attempt to set this to a value less than zero or greater than 0.999.</exception></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SearchImageMaskOffsetY"><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignRunParams_SearchImageMaskOffsetY--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfSearchImageMaskOffsetY" /></li></ul></event><remarks><PARA>Y offset value in pixels.  The X &amp; Y offset values measure the offset from the upper-left corner of the run-time input image to the upper-left corner of the SearchImageMask in image coordinates of the input image.</PARA><DEFAULT>0</DEFAULT></remarks><summary>Y offset value in pixels.  The X &amp; Y offset values measure the offset from the upper-left corner of the run-time input image to the upper-left corner of the SearchImageMask in image coordinates of the input image.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SearchImageMaskOffsetX"><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignRunParams_SearchImageMaskOffsetX--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfSearchImageMaskOffsetX" /></li></ul></event><summary>X offset value in pixels.  The X &amp; Y offset values measure the offset from the upper-left corner of the run-time input image to the upper-left corner of the SearchImageMask in image coordinates of the input image.</summary><remarks><PARA>X offset value in pixels.  The X &amp; Y offset values measure the offset from the upper-left corner of the run-time input image to the upper-left corner of the SearchImageMask in image coordinates of the input image.</PARA><DEFAULT>0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SearchImageMask"><remarks><PARA>A <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="runtime_image_masking">mask</see><see cref="T:Cognex.VisionPro.CogImage8Grey" /> that you use  to exclude features in specified parts of the run-time image. Before being applied to the image, the mask is set to the offset in the run-time image specified by <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SearchImageMaskOffsetY" /> and <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SearchImageMaskOffsetX" />. 
Features located within pixels in the run-time image that correspond to pixels in the mask image that have a value of less than 128 ("don't care pixels") are ignored; mask pixels with values greater than or equal to 128 are care pixels (features that lie within image pixels that correspond to care pixels are considered).
</PARA><DEFAULT>NULL</DEFAULT></remarks><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignRunParams_SearchImageMask--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfSearchImageMask" /></li></ul></event><summary>Mask that is used when running the PMAlign pattern.  The mask allows the user to identify areas of the pattern as "Care" or "Don't Care".  The mask is aligned to the run-time input image using the SearchImageMaskOffsetX &amp; Y values.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SearchRegionMode"><remarks><PARA>A value defined in <see cref="T:Cognex.VisionPro.CogRegionModeConstants" /> that specifies how the search region is to be applied to the input image of a PMAlign inspection.
	If you specify
		<see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBoxAdjustMask</see>	
	 for  mode, the search will be performed on the masked input region.
	 If you specify
		<see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>	
	 the input region alone is used.
	 If you do not supply a value for the <paramref name="SearchRegion" /> argument to <see cref="M:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Execute(Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.ICogRegion,Cognex.VisionPro.PMAlign.CogPMAlignRunParams)" /> function, the value of this argument is ignored.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBoxAdjustMask</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignRunParams_SearchRegionMode--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfSearchRegionMode" /></li></ul></event><summary>Mode which specifies how the search region is to be applied to the input image of a PMAlign inspection.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
            The supplied value is neither
		<see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBoxAdjustMask</see>	
		nor
		<see cref="T:Cognex.VisionPro.CogRegionModeConstants">PixelAlignedBoundingBox</see>.
            </para></exception></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SaveMatchInfo"><remarks><PARA>Flag indicating whether to save information necessary to create result match graphics.  Must be set to true if user wants to get match info graphics using the <see cref="M:Cognex.VisionPro.PMAlign.CogPMAlignResult.CreateResultGraphics(Cognex.VisionPro.PMAlign.CogPMAlignResultGraphicConstants)" />  method.</PARA><PARA>
This property has no effect if the pattern is located using the PatQuick algorithm. If this property is set to true, additional time and memory are required for each returned <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignResult" /></PARA><DEFAULT>False</DEFAULT></remarks><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignRunParams_SaveMatchInfo--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfSaveMatchInfo" /></li></ul></event><summary>Flag indicating whether to save information necessary to create result match graphics.  Must be set to true if user wants to get match info graphics using the ICogPMAlignResult::CreateResultGraphics method.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.GrainLimitFine"><remarks><PARA>The fine <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="feature_size_and_pattern_granularity">granularity limit</see> that will be used at run-time if <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.GrainLimitsUsePattern" /> is false.  <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.GrainLimitCoarse" /> must be greater than or equal to  <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.GrainLimitFine" />. Setting fine limit to a value greater than the coarse limit will also set the coarse limit to the new fine value.  Valid range is from 1.0 to 25.5.</PARA><DEFAULT>
1.0
</DEFAULT></remarks><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignRunParams_GrainLimitCoarse--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfGrainLimitCoarse" /></li></ul></event><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes and <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.GrainLimitCoarse" /> changes as well. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_PMAlignRunParams_GrainLimits--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfGrainLimitCoarse" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfGrainLimitFine" /></li></ul></event><summary>Fine grain limit that will be used at run-time if GrainLimitsUsePattern is false.  Coarse must be greater than or equal to fine.  Setting fine greater than coarse will also set coarse to the new fine value.  Valid range is from 1.0 to 25.5 inclusive.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
            The supplied value is less than 1.0 or greater than 25.5.
            </para></exception></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.GrainLimitCoarse"><summary>Coarse grain limit that will be used at run-time if GrainLimitsUsePattern is false.  Coarse must be greater than or equal to fine.  Setting coarse less than fine will also set fine to the new coarse value.  Valid range is from 1.0 to 25.5 inclusive.</summary><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignRunParams_GrainLimitCoarse--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfGrainLimitCoarse" /></li></ul></event><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes and <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.GrainLimitFine" /> changes as well. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_PMAlignRunParams_GrainLimits--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfGrainLimitCoarse" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfGrainLimitFine" /></li></ul></event><remarks><PARA>The coarse <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="feature_size_and_pattern_granularity">granularity limit</see> that will be used at run-time if <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.GrainLimitsUsePattern" /> is false.  <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.GrainLimitCoarse" /> must be greater than or equal to  <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.GrainLimitFine" />.  Setting the coarse limit to a value less than the fine limit will also set the fine limit to the new coarse value.  Valid range is from 1.0 through 25.5.</PARA><DEFAULT>
4.0
</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
            The supplied value is less than 1.0 or greater than 25.5.
            </para></exception></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.GrainLimitsUsePattern"><remarks><PARA>If true then the <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="feature_size_and_pattern_granularity">granularity limits</see> 
	specified by the <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignPattern" /> will be used.  If false then the granularity limits specified in this <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignRunParams" /> will be used.</PARA><DEFAULT>True</DEFAULT></remarks><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignRunParams_GrainLimitsUsePattern--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfGrainLimitsUsePattern" /></li></ul></event><summary>If true then the grain limits specified in CogPMAlignPattern will be used.  If false then the grain limits specified in this CogPMAlignRunParams will be used.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.XYOverlap"><summary>Result candidates overlap in area if the percentage of area overlap is greater than XYOverlap.  PMAlign discards the weaker pattern instance when two pattern instances overlap for all DOFs as well as area.</summary><remarks><PARA>Result candidates <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="controlling_overlap_tolerance">overlap</see> in area if the percentage of area overlap is greater than XYOverlap.  PMAlign discards the weaker pattern instance when two pattern instances overlap for all degrees of freedom as well as area by the specified overlap percentage.</PARA><DEFAULT>0.8</DEFAULT></remarks><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignRunParams_XYOverlap--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfXYOverlap" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
            The supplied value is less than 0.0 or greater than 1.0.
            </para></exception></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.ZoneScaleY"><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignRunParams_ZoneScaleY--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfZoneScaleY" /></li></ul></event><remarks><PARA>An <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale" /> object describing  the Y scale 
	<see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="understanding_pattern_transformation">degree of freedom</see>.</PARA><PARA>Specify a value for <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.ZoneScale" /> to specify the unified scale degree of freedom.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
            A  NULL value was supplied when trying to set  the value.
            </para></exception><summary>Zone configuration for the Y scale degree of freedom only.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.ZoneScaleX"><remarks><PARA>An <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale" /> object describing  the X scale 
	<see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="understanding_pattern_transformation">degree of freedom</see>.</PARA><PARA>Specify a value for <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.ZoneScale" /> to specify the unified scale degree of freedom.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
            A  NULL value was supplied when trying to set  the value.
            </para></exception><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignRunParams_ZoneScaleX--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfZoneScaleX" /></li></ul></event><summary>Zone configuration for the X scale degree of freedom only.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.ZoneScale"><remarks><PARA>An <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale" /> object describing  the unified scale 
	<see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="understanding_pattern_transformation">degree of freedom</see>.
	Unified scale is a scale change where the x-scale equals the y-scale.</PARA><PARA>
Any value you specify for the unified scale degree of freedom is multiplied by the values specified for 
<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.ZoneScaleX" /> and <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.ZoneScaleY" /> to produce the overall search space (if you specify a zone) or nominal value (if you specify a nominal value).
</PARA></remarks><summary>Zone configuration for the uniform scale degree of freedom.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
            A  NULL value was supplied when trying to set  the value.
            </para></exception><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignRunParams_ZoneScale--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfZoneScale" /></li></ul></event></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.ZoneAngle"><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignRunParams_ZoneAngle--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfZoneAngle" /></li></ul></event><summary>Zone configuration for the angle degree of freedom.  Units are in Radians.</summary><remarks><PARA>An <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle" /> object describing  the rotation 
	<see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="understanding_pattern_transformation">degree of freedom</see>.</PARA></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
            A  NULL value was supplied when trying to set  the value.
            </para></exception></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.RunAlgorithm"><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignRunParams_RunAlgorithm--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfRunAlgorithm" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	            The supplied value is not a member of
    			<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignRunAlgorithmConstants" />.
		</para></exception><remarks><PARA>The algorithm used to run this PMAlign pattern.  The algorithm you specify (which must be one of <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignRunAlgorithmConstants" />)  must be among those for which the PMAlign object was trained.</PARA><PARA>The PatMax software supports two pattern-location algorithms:
			<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignRunAlgorithmConstants">PatMax</see>
					and
			<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignRunAlgorithmConstants">PatQuick</see>.
		PatMax offers higher accuracy than PatQuick, but requires more time to operate.
		The PatMax algorithm can also return additional score information.
		You can also specify
			<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignRunAlgorithmConstants">BestTrained</see>
		, in which case the tool will run using the highest-accuracy algorithm for which it has been trained.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignRunAlgorithmConstants">BestTrained</see></DEFAULT><seealso cref="P:Cognex.VisionPro.PMAlign.CogPMAlignPattern.TrainAlgorithm" /></remarks><summary>The algorithm used to run this PMAlign pattern.  The algorithm specified must be among those for which the PMAlign object was trained.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Timeout"><summary>The maximum execution time (msec) allowed to run a PMAlign inspection.  If PMAlign has not finished by the end of the timeout period, it will stop soon thereafter and return E_Cog_TimeoutExpired.  This value only applies if TimeoutEnabled is true.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
	The supplied value is less than zero.
	</para></exception><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignRunParams_Timeout--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfTimeout" /></li></ul></event><remarks><PARA>The maximum execution time (msec) allowed to run a PMAlign inspection.  If PMAlign has not finished by the end of the timeout period, it will stop soon thereafter and return <see cref="T:Cognex.VisionPro.CogPMAlignRunParams" />.  This value only applies if TimeoutEnabled is true.</PARA><DEFAULT>5000 milliseconds</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.TimeoutEnabled"><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignRunParams_TimeoutEnabled--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfTimeoutEnabled" /></li></ul></event><summary>If true then the Timeout property limits the execution time of the PMAlign inspection.  If false then timeout is disabled and the Timeout property is ignored.</summary><remarks><PARA>If true then the <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Timeout" /> property limits the execution time of the PMAlign inspection.  If false then timeout is disabled and the Timeout property is ignored.</PARA><DEFAULT>False</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.ScoreUsingClutter"><summary>Determines if PatMax considers extraneous features when computing the score of a pattern instance.  True, extraneous features are considered and will result in lower scores.  False, extraneous features are ignored.  Available for PatMax only.</summary><remarks><PARA>Determines if PatMax considers extraneous (<see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="fit_error_coverage_and_clutter">clutter</see>) features when computing the <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="score">score</see> of a pattern instance.  True, extraneous features are considered and will result in lower scores.  False, extraneous features are ignored.  Available for PatMax only.</PARA><DEFAULT>True</DEFAULT></remarks><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignRunParams_ScoreUsingClutter--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfScoreUsingClutter" /></li></ul></event></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.ContrastThreshold"><summary>Minimum acceptable contrast for a pattern instance.  Only pattern instances where the average difference in pixel values across all feature boundaries exceeds the contrast threshold are considered by PMAlign.  Threshold must be &gt;= zero.</summary><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignRunParams_ContrastThreshold--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfContrastThreshold" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
            The supplied value is less than 0.0.
            </para></exception><remarks><PARA>Minimum acceptable <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="contrast">contrast</see> for a pattern instance.  Only pattern instances where the average difference in pixel values across all feature boundaries exceeds the contrast threshold are considered by PMAlign.  Threshold must be greater than or equal to zero.</PARA><DEFAULT>10</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.AcceptThreshold"><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignRunParams_AcceptThreshold--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfAcceptThreshold" /></li></ul></event><summary>Acceptance threshold on the score of a result.  Only instances of the pattern that receive scores greater than or equal to this threshold are accepted.  Valid range is from 0 to 1.</summary><remarks><PARA>The <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="expected_result_count_and_accept_thresholds">acceptance threshold</see> on the score of a result.  Only instances of the pattern that receive scores greater than or equal to this threshold are accepted.  Valid range is from 0 to 1.</PARA><PARA>PMAlign may return more pattern instances than you specify if the instances have nearly equal scores that are only slightly below the accept threshold you specify.</PARA><PARA>
	After performing several test searches, you may be tempted to set the acceptance threshold value
	equal to or very close to the score of your test instance. Because PatMax searches first for coarse features,
	your expected instance may be filtered out if you set the acceptance threshold very close to the final score.
</PARA><DEFAULT>
0.5
</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
            The supplied value is less than 0.0 or greater than 1.0.
            </para></exception></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.ApproximateNumberToFind"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
            The supplied value is less than one.
            </para></exception><summary>Number of results to look for.  In some cases, PMAlign may return more or fewer results than requested.</summary><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignRunParams_ApproximateNumberToFind--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SfApproximateNumberToFind" /></li></ul></event><remarks><PARA>Number of <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="expected_result_count_and_score_thresholds">results</see> to look for.  In some cases, PMAlign may return more or fewer results than requested.</PARA><DEFAULT>1</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.PMAlign.CogPMAlignTool"><remarks><PARA>Primary interface of a CogPMAlignTool.</PARA></remarks><summary>Tool which locates features using a PMAlign pattern.  This tool encompasses all of the classes required to run a PMAlign inspection.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignTool.#ctor(Cognex.VisionPro.PMAlign.CogPMAlignTool)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignTool.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignTool.SfLastRunRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignTool.SfLastRunRecordDiagEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by LastRunRecordDiagEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignTool.SfCurrentRecordEnable"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by CurrentRecordEnable may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignTool.SfInputImage"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by InputImage may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignTool.SfPattern"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Pattern may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignTool.SfRunParams"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by RunParams may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignTool.SfResults"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Results may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignTool.SfSearchRegion"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SearchRegion may have changed.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.SearchRegion"><summary>Region of interest in the InputImage that is used to locate PMAlign pattern(s).  NULL means use entire InputImage.  The ICogPMAlignRunParams::SearchRegionMode property specifies exactly how the region will be applied to this image.</summary><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignTool_SearchRegion--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignTool.SfSearchRegion" /></li></ul></event><remarks><PARA>An <see cref="T:Cognex.VisionPro.CogRegion" /> containing the region of interest in the InputImage. The pattern location operation is limited to this region of the <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.InputImage" />.  If you supply NULL for this property, the tool searches the entire input image.  The <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SearchRegionMode" /> property specifies exactly how the region will be applied to this image.</PARA><PARA>You can specify any  type of region (Affine Rectangle, Rectangle, Circle, and so on), and you can specify any degrees 
of freedom for the region. How non-rectangular regions are used for training is determined by the <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SearchRegionMode" /> property.</PARA><DEFAULT>NULL</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.Results"><remarks><PARA>Results from the last invocation of the Run method.  A new  <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignResults" /> is factoried for each inspection.  Previous results will be released prior to the new inspection.</PARA><PARA>The returned object (*<paramref name="pVal" />) is Nothing (NULL) if the last invocation of <see cref="M:Cognex.VisionPro.PMAlign.CogPMAlignTool.Run" /> failed. 
If <see cref="M:Cognex.VisionPro.PMAlign.CogPMAlignTool.Run" /> succeeded, but no pattern instances were found, the returned 
object will be valid but will have a <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignResults.Count" /> of 0.</PARA></remarks><summary>Results from the last invocation of the Run method.  A new CogPMAlignResults is factoried for each inspection.  Previous results will be released prior to the new inspection.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.RunParams"><remarks><PARA>A <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignRunParams" /> object containing the run-time parameters for this tool.</PARA><DEFAULT>A default-constructed  <!--
					TAGFIX: There's a chance the name space is wrong.<DISPLAY COCLASS="CogPMAlignRunParams" />
				--><see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignRunParams" /></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignTool_RunParams--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignTool.SfRunParams" /></li></ul></event><summary>The PMAlign run parameters.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.Pattern"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignTool_Pattern--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignTool.SfPattern" /></li></ul></event><remarks><PARA>The <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignPattern" />  for which the tool will search.</PARA><DEFAULT>A default-constructed  <!--
					TAGFIX: There's a chance the name space is wrong.<DISPLAY COCLASS="CogPMAlignPattern" />
				--><see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignPattern" />.</DEFAULT></remarks><summary>The PMAlign pattern.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.InputImage"><summary>Search image used to run a PMAlign inspection.  The SearchRegion is applied to this InputImage in order to define the region that will be used locate PMAlign pattern(s).</summary><remarks><PARA>Search <see cref="T:Cognex.VisionPro.CogImage8Grey" /> used to run a PMAlign inspection.  The tool attempts to locate the trained <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.Pattern" /> in this image. The <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.SearchRegion" /> is applied to this InputImage in order to define the region that will be used locate PMAlign pattern(s).</PARA><DEFAULT>NULL (no input image)</DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignTool_InputImage--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignTool.SfInputImage" /></li></ul></event></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.CurrentRecordEnable"><summary>Enable creation of records by bitwise ORing the appropriate CurrentRecordConstants.</summary><remarks><PARA>Enable creation of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignCurrentRecordConstants" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignCurrentRecordConstants">TrainImage</see> +
<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignCurrentRecordConstants">TrainRegion</see> +
<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignCurrentRecordConstants">PatternOrigin</see> +
<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignCurrentRecordConstants">InputImage</see> +
<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignCurrentRecordConstants">SearchRegion</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignTool_CurrentRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignTool.SfCurrentRecordEnable" /></li></ul></event></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.LastRunRecordDiagEnable"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignTool_LastRunRecordDiagEnable--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignTool.SfLastRunRecordDiagEnable" /></li></ul></event><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordDiagConstants.  These are diagnostic records that may cause the Tool to have a longer execution time.</summary><remarks><PARA>Enable creation of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordDiagConstants" />.  These are diagnostic records that may cause the Tool to have a longer execution time.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordDiagConstants">InputImageByReference</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.LastRunRecordEnable"><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignTool_LastRunRecordEnable--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignTool.SfLastRunRecordEnable" /></li></ul></event><remarks><PARA>Enable creation of records by bitwise ORing the appropriate <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordConstants" />.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordConstants">ResultsOrigin </see> + 
	<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordConstants">ResultsMatchRegion</see></DEFAULT></remarks><summary>Enable creation of records by bitwise ORing the appropriate LastRunRecordConstants.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.RunStatus"><summary>Gets general information about the last call to Run.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.Name"><summary>Gets or sets the name of the tool.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignTool.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignTool.Run"><event cref="E:Cognex.VisionPro.ICogTool.Running" cgnxEvent="PreRun"><para>
		Fires before the tool runs.
	</para></event><event cref="E:Cognex.VisionPro.ICogChangedEvent.Changed" cgnxEvent="multiState"><para>
	
		Fires when the tool runs. If the run was successful, results are generated;
		if the run was not successful, no results are generated and the previous results are cleared.
		Use <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.RunStatus" /> after <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTool" /> returns or in a
			<see cref="E:Cognex.VisionPro.ICogTool.Ran" /> event handler
		to determine whether a run was successful or unsuccessful.
	</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_Tool_Results--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignTool.SfResults" /></li><!--FA:cogFA_Tool_LastRunRecord--></ul></event><event cref="E:Cognex.VisionPro.ICogTool.Ran" cgnxEvent="PostRun"><para>
		Fires after the tool runs.
	</para></event><summary>Runs the tool using the current parameter settings.</summary><remarks><PARA>
		Runs the tool.
	</PARA><PARA>
		When <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.RunMode" /> is
		<see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunModeConstants.SearchImage" />
		(the default mode),
		calling this method attempts to locate this <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTool" />'s
		<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.Pattern" />  in this 
		<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTool" />'s
		<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.InputImage" /> using
		this  <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignTool" />'s
		<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.RunParams" />.
	</PARA><PARA>
		When <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.RunMode" /> is
		<see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignRunModeConstants.RefineStartPose" />,
		calling this method
		refines the <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.StartPose" />
		instead of searching the image.
	</PARA><PARA>
		Check the <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.RunStatus" /> to determine
		whether this function succeeded, failed, or timed out.
		If the tool ran successfully, the results are available through
		the <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.Results" /> property.
	</PARA><NOTE>
		This method does not actually raise the exceptions listed below. 
		Use the <see cref="P:Cognex.VisionPro.CogFitCircleTool.RunStatus" /> property
		to obtain a <see cref="T:Cognex.VisionPro.ICogRunStatus" /> reference. Then use
		its <see cref="P:Cognex.VisionPro.ICogRunStatus.Exception" /> property to see
		if the Run method raised any exceptions.
	</NOTE><seealso cref="M:Cognex.VisionPro.PMAlign.CogPMAlignPattern.Execute(Cognex.VisionPro.CogImage8Grey,Cognex.VisionPro.ICogRegion,Cognex.VisionPro.PMAlign.CogPMAlignRunParams)" /></remarks><exception cref="T:Cognex.VisionPro.Exceptions.CogSecurityViolationException" cgnxHRESULT="E_Cog_SecurityViolation"><para>Security is not enabled for this vision tool. See 
<see cref="u:Programming.Tools.Theory.Security" cgnxAnchor="resolving_securityrelated_error_messages">Resolving Security-Related Error Messages</see>
for more information.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNoInputImageException" cgnxHRESULT="E_CogOperator_NoInputImage"><para><see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.InputImage" />  is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogImageNoPixelsException" cgnxHRESULT="E_CogImage_NoPixels"><para><see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.InputImage" /> is not allocated.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorNotTrainedException" cgnxHRESULT="E_CogOperator_NotTrained"><para><see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.Pattern" /> is not trained.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para>The selected space of the <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.SearchRegion" /> is not a valid space of the Image.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogOperatorInvalidRegionException" cgnxHRESULT="E_CogOperator_InvalidRegion"><para><see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.SearchRegion" /> falls completely outside of  <paramref name="Image" />.  (Clipping of <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.SearchRegion" /> by <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.InputImage" /> is permitted.)</para></exception><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para><see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.RunParams" />  is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogPMAlignPatMaxNotTrainedException" cgnxHRESULT="E_CogPMAlign_PatMaxNotTrained"><para><see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.Pattern" /> was not  trained for PatMax and  <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.RunParams" />.<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.RunAlgorithm" /> is PatMax.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogPMAlignPatQuickNotTrainedException" cgnxHRESULT="E_CogPMAlign_PatQuickNotTrained"><para><see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.Pattern" /> was not trained for PatQuick and <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.RunParams" /><see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.RunAlgorithm" /> is PatQuick.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogPMAlignPatFlexNotTrainedException" cgnxHRESULT="E_CogPMAlign_PatFlexNotTrained"><para><see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.Pattern" /> was not trained for PatFlex and <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.RunParams" /><see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.RunAlgorithm" /> is PatFlex.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogTimeoutExpiredException" cgnxHRESULT="E_Cog_TimeoutExpired"><para>The pattern location took longer than the value you specified for <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Timeout" />.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogToolNoOperatorException" cgnxHRESULT="E_CogTool_NoOperator"><para><see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.Pattern" />  is NULL.</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogPMAlignSaveMatchInfoErrorException" cgnxHRESULT="E_CogPMAlign_SaveMatchInfoError"><para><see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.SaveMatchInfo" /> is not properly enabled (or disabled) when the
			<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordDiagConstants">ResultsMatchFeatures</see> bit of
			<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.LastRunRecordDiagEnable" />
			 is set (or cleared).
	</para></exception><exception cref="T:Cognex.VisionPro.Exceptions.CogPMAlignSaveDeformationInfoErrorException" cgnxHRESULT="E_CogPMAlign_SaveDeformationInfoError"><para><see cref="P:Cognex.VisionPro.PMAlign.ICogPMAlignFlexRunParams.SaveDeformationInfo" /> is not properly enabled (or disabled) when the
			<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordDiagConstants">FlexDeformationGrid</see> bit of
			<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.LastRunRecordDiagEnable" />
			 is set (or cleared).
	</para></exception></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignTool.Dispose(System.Boolean)"><param name="disposing">n/a</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="T:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle"><remarks><PARA>This interface lets you specify either a nominal value for the angle <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="controlling_the_patmax_search">degree of freedom</see> for a search or the range of values for the angle degree of freedom.</PARA><PARA>If you specify a nominal value, the results returned by the tool will have exactly the angle value you specify. If you specify a low and high limit, the results returned by the tool will be within (or slightly outside of) the range of angles that you specify.</PARA></remarks><summary>Class which holds angle Degree Of Freedom (DOF) information.  PMAlign can locate patterns that have changed in angle from the trained pattern.  This class specifies the angle(s) at which patterns may be located.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.#ctor(Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.SfConfiguration"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Configuration may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.SfNominal"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Nominal may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.SfLow"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Low may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.SfHigh"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by High may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.SfOverlap"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Overlap may have changed.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.Overlap"><summary>Result candidates overlap for an angle DOF if the abs(Angle #1 - Angle #2) &lt;= Overlap.  PMAlign discards the weaker pattern instance when two pattern instances overlap for all degrees of freedom (DOF) as well as area.  Overlap units are in radians.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
            The supplied value is less than zero.
            </para></exception><remarks><PARA>Result candidates overlap for the angle <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="controlling_patmax_alignment">degree of freedom</see> if the absolute difference between the two results' angles is less than or equal to the <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.Overlap" /> value you specify.  PMAlign discards the weaker pattern instance when two pattern instances overlap for all degrees of freedom as well as area.  Overlap units are in radians.</PARA><DEFAULT>2π</DEFAULT></remarks><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignZoneAngle_Overlap--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.SfOverlap" /></li></ul></event></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.High"><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignZoneAngle_High--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.SfHigh" /></li></ul></event><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes and <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.Low" /> was changed as well. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_PMAlignZoneAngle_LowHighZone--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.SfLow" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.SfHigh" /></li></ul></event><summary>High limit (in radians) for angle DOF zone.  Only used if Configuration is cogPMAlignZoneLowHigh.  Low must be &lt;= to high.  Setting high &lt; low will also set low to the new value.</summary><remarks><PARA>High limit (in radians) for angle <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="controlling_the_patmax_search">degree of freedom</see>. Only used if <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.Configuration" />  is
	<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignZoneConstants">LowHigh</see>.

 In this case, PMAlign will use the low and  high limits for the expected range of values.  <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.Low" />  must be less than or equal to <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.High" />.  Setting <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.High" /> to a value less than <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.Low" /> also sets <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.Low" /> to the new value.</PARA><PARA>
The angle limit is measured from the selected space of the <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.InputImage" /> to the located pattern space. This rotation angle is the <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Rotation" /> component of the  <see cref="T:Cognex.VisionPro.CogTransform2DLinear" /> returned by <see cref="M:Cognex.VisionPro.PMAlign.CogPMAlignResult.GetPose" /> function.
</PARA><PARA>You can specify any value for the nominal angle. The tool always returns angle results in the range -π to +π.</PARA><DEFAULT>π/4</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.Low"><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignZoneAngle_Low--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.SfLow" /></li></ul></event><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes and <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.High" /> was changed as well. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_PMAlignZoneAngle_LowHighZone--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.SfLow" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.SfHigh" /></li></ul></event><summary>Low limit (in radians) for angle DOF zone.  Only used if Configuration is cogPMAlignZoneLowHigh.  Low must be &lt;= to high.  Setting low &gt; high will also set high to the new value.</summary><remarks><PARA>Low limit (in radians) for angle <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="controlling_the_patmax_search">degree of freedom</see>.  Only used if <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.Configuration" />  is 	<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignZoneConstants">LowHigh</see>.  In this case, PMAlign will use the low and  high limits for the expected range of values.  <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.High" />  must be greater than <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.Low" />.  Setting <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.Low" />  to a value greater  than <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.High" /> also sets <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.High" /> to the new value.</PARA><PARA>
The angle limit is measured from the selected space of the <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.InputImage" /> to the located pattern space. This rotation angle is the <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Rotation" /> component of the  <see cref="T:Cognex.VisionPro.CogTransform2DLinear" /> returned by <see cref="M:Cognex.VisionPro.PMAlign.CogPMAlignResult.GetPose" /> function.
</PARA><PARA>You cans specify any value for this property, but search results will always have angle values from -π through π.</PARA><DEFAULT>-pi/4</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.Nominal"><remarks><PARA>The nominal value (in radians) for the angle <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="controlling_the_patmax_search">degree of freedom</see>. This is only used if <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.Configuration" />  is 	<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignZoneConstants">Nominal</see>.
  In this case PMAlign only finds pattern instances that are close to the nominal value specified and the results will always be reported at exactly the nominal value.</PARA><PARA>
The nominal angle is the angle from the selected space of the <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.InputImage" /> to the located pattern space. This rotation angle is the <see cref="P:Cognex.VisionPro.CogTransform2DLinear.Rotation" /> component of the  <see cref="T:Cognex.VisionPro.CogTransform2DLinear" /> returned by <see cref="M:Cognex.VisionPro.PMAlign.CogPMAlignResult.GetPose" /> function.
</PARA><PARA>You can specify any value for the nominal angle. The tool always returns angle results in the range -pi to +pi.</PARA><DEFAULT>0.0</DEFAULT></remarks><summary>The nominal value (in radians) is only used if Configuration is cogPMAlignZoneNominal.  In this case PMAlign only finds pattern instances that are close to the Nominal value specified and the results will always be reported at exactly the nominal value.</summary><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignZoneAngle_Nominal--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.SfNominal" /></li></ul></event></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.Configuration"><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignZoneAngle_Configuration--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.SfConfiguration" /></li></ul></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
 The supplied value is not 
 			<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignZoneConstants">Nominal</see>
or
		<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignZoneConstants">LowHigh</see>.
</para></exception><summary>Configuration of this DOF zone which specifies whether PMAlign will use either the low &amp; high limits for the expected range of values or just the nominal value.</summary><remarks><PARA>The configuration of this <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="controlling_the_patmax_search">degree of freedom</see>. Specify 
	<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignZoneConstants">Nominal</see>
			 to specify a nominal value,
	<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignZoneConstants">LowHigh</see>
 to specify a range of values for the degree of freedom. These values are members of the <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignZoneConstants" /> enumeration.</PARA><PARA>If you specify a nominal value, the results returned by the tool will have exactly the angle value you specify. If you specify a low and high limit, the results returned by the tool will be within (or slightly outside of) the range of angles you specify.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignZoneConstants">Nominal</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="E:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale"><summary>Class which holds scale Degree Of Freedom (DOF) information.  PMAlign can locate patterns that have changed in scale from the trained pattern.  This class specifies the scale(s) at which patterns may be located.</summary><remarks><PARA>Interface used to select and configure the desired method, "Nominal Value" or "Low, High Zone", of locating a PMAlign pattern for a scale-based <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="controlling_the_patmax_search">degree of freedom</see>.</PARA><PARA>If you specify a nominal value, the results returned by the tool will have exactly the scale value you specify. If you specify a low and high limit, the results returned by the tool will be within (or slightly outside of) the range of scales that you specify.</PARA></remarks></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.#ctor(Cognex.VisionPro.PMAlign.CogPMAlignZoneScale)"><param name="other">The instance to copy from.</param><summary>Constructs a new instance of this class as a deep copy of the given instance.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.#ctor"><summary>Constructs a new instance of this class.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.SfConfiguration"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Configuration may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.SfNominal"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Nominal may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.SfLow"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Low may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.SfHigh"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by High may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.SfOverlap"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Overlap may have changed.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.Overlap"><remarks><PARA>Result candidates overlap for the scale <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="controlling_patmax_alignment">degree of freedom</see> if the ratio of the results' scale values is less than or equal to the <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.Overlap" /> value you specify.  PMAlign discards the weaker pattern instance when two pattern instances overlap for all degrees of freedom as well as area.</PARA><PARA>
The scale overlap 
threshold is expressed as the ratio of the scale of the 
instance with a larger scale to the scale of the instance with
the smaller scale.  If the ratio of the two results is less than
or equal to <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.Overlap" />, the results are considered overlapping.
</PARA><PARA>
Since the ratio is the greater scale over the smaller scale, the
overlap threshold must be  greater than or equal to one.
For example, if you specify 1.2 for the overlap threshold and two 
instances had scales of 1.25 and 2.50, they would not meet the
overlap threshold because the ratio of 2.5 to 1.25 (2.0) is
greater than the threshold value (1.2).
</PARA><DEFAULT>1.4</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
            The supplied value is less than one.
            </para></exception><summary>Result candidates overlap for a scale DOF if the scale ratio (larger scale/smaller scale) &lt;= Overlap.  PMAlign discards the weaker pattern instance when two pattern instances overlap for all degrees of freedom (DOF) as well as area.</summary><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignZoneScale_Overlap--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.SfOverlap" /></li></ul></event></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.High"><remarks><PARA>High limit for the scale <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="controlling_the_patmax_search">degree of freedom</see>.  Only used if <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.Configuration" />  is 	<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignZoneConstants">LowHigh</see>.
  In this case, PMAlign will use the low and  high limits for the expected range of values.  <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.Low" />  must be less than or equal to <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.High" />.  Setting <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.High" /> to a value less than <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.Low" /> also sets <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.Low" /> to the new value.</PARA><PARA>
This scale limit is measured from the <see cref="P:Cognex.VisionPro.CogImage8Grey.SelectedSpaceName" /> of the
<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.InputImage" /> to "Pattern Space". This is equivalent to the scale component of the <see cref="T:Cognex.VisionPro.CogTransform2DLinear" /> returned by <see cref="M:Cognex.VisionPro.PMAlign.CogPMAlignResult.GetPose" /> function.
</PARA><DEFAULT>1.2</DEFAULT></remarks><summary>High limit for DOF zone.  Only used if Configuration is cogPMAlignZoneLowHigh.  In this case, PMAlign will use the low &amp; high limits for the expected range of values.  Low must be &lt;= to high.  Setting high &lt; low will also set high to the new value.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
            The supplied value is less than or equal to zero.
            </para></exception><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignZoneScale_High--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.SfHigh" /></li></ul></event><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes and <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.Low" /> was changed as well. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_PMAlignZoneScale_LowHighZone--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.SfLow" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.SfHigh" /></li></ul></event></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.Low"><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignZoneScale_High--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.SfHigh" /></li></ul></event><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.Changed" cgnxEvent="multiState"><para>
        
Fires when the value of this property changes and <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.High" /> was changed as well. 
</para><para>The following state flags may be affected:</para><ul><!--FA:cogFA_PMAlignZoneScale_LowHighZone--><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.SfLow" /></li><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.SfHigh" /></li></ul></event><remarks><PARA>Low limit for the scale <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="controlling_the_patmax_search">degree of freedom</see>.  Only used if <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.Configuration" /> is 	<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignZoneConstants">LowHigh</see>.  In this case, PMAlign will use the low and  high limits for the expected range of values.  <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.High" />  must be greater than <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.Low" />.  Setting <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.Low" /> to a value greater  than <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.High" /> also sets <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.High" /> to the new value.</PARA><PARA>This scale limit is measured from the 
			<see cref="P:Cognex.VisionPro.CogImage8Grey.SelectedSpaceName" /> of the
			<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.InputImage" /> to "Pattern Space". This is equivalent to
			the scale component of the <see cref="T:Cognex.VisionPro.CogTransform2DLinear" />
			returned by <see cref="M:Cognex.VisionPro.PMAlign.CogPMAlignResult.GetPose" /> function.
</PARA><DEFAULT>0.8</DEFAULT></remarks><summary>Low limit for DOF zone.  Only used if Configuration is cogPMAlignZoneLowHigh.  In this case, PMAlign will use the low &amp; high limits for the expected range of values.  Low must be &lt;= to high.  Setting low &gt; high will also set high to the new value.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
            The supplied value is less than or equal to zero.
            </para></exception></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.Nominal"><remarks><PARA>The nominal value for the scale <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="controlling_the_patmax_search">degree of freedom</see>. This is only used if <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.Configuration" />  is 	<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignZoneConstants">Nominal</see>.  In this case PMAlign only finds pattern instances that are close to the nominal value specified and the results will always be reported at exactly the nominal value.</PARA><DEFAULT>1.0</DEFAULT></remarks><summary>The nominal value is only used if Configuration is cogPMAlignZoneNominal.  In this case PMAlign only finds pattern instances that are close to the Nominal value specified and the results will always be reported at exactly the nominal value.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
            The supplied value is less than or equal to zero.
            </para></exception><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignZoneScale_Nominal--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.SfNominal" /></li></ul></event></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.Configuration"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>
 The supplied value is not 
 			<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignZoneConstants">Nominal</see>
or
		<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignZoneConstants">LowHigh</see>.
</para></exception><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.Changed" cgnxEvent="singleState"><para>
        
Fires when the value of this property changes. 
</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignZoneScale_Configuration--><ul><li><see cref="F:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.SfConfiguration" /></li></ul></event><summary>Configuration of this DOF zone which specifies whether PMAlign will use either the low &amp; high limits for the expected range of values or just the nominal value.</summary><remarks><PARA>The configuration of this <see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="controlling_the_patmax_search">degree of freedom</see>. Specify 	<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignZoneConstants">Nominal</see>

 to specify a nominal value,
 	<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignZoneConstants">LowHigh</see>

 to specify a range of values for the degree of freedom. These values are members of the <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignZoneConstants" /> enumeration.</PARA><PARA>If you specify a nominal value, the results returned by the tool will have exactly the scale value you specify. If you specify a low and high limit, the results returned by the tool will be within (or slightly outside of) the range of scales that you specify.</PARA><DEFAULT><see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignZoneConstants">Nominal</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.ChangedEventSuspended"><summary>If nonzero, indicates that the raising of the Changed event has been suspended. This value is incremented when SuspendChangedEvent is called and decremented when ResumeAndRaiseChangedEvent is called.</summary></member><member name="P:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.HasChanged"><summary>If true, the serializable state of this object has changed since the last time it was serialized.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.Dispose(System.Boolean)"><param name="disposing">Should be set to true when called from your public Dispose() method, thus disposing of all managed and unmanaged resources.  It should be set to false when called from your Finalizer, thus disposing of only unmanaged resources.</param><summary>Releases all resources used by this class instance.  Only derived classes that implement Dispose should call this method; Other clients who wish to explicitly release resources should call IDisposable.Dispose.   Do not attempt to access an object after it has been disposed.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.Clone"><summary>Returns a deep copy of this class instance.  Derived classes that implement Clone should override this method; other clients who wish to clone this instance should call ICloneable.Clone. See also CogSerializer.DeepCopyObject</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.SuspendChangedEvent"><summary>Temporarily suspends the raising of the Changed event. May be called more than once, and a corresponding call to ResumeAndRaiseChangedEvent must be made for each call to SuspendChangedEvent.</summary></member><member name="M:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.ResumeAndRaiseChangedEvent"><summary>Re-enables raising of the Changed event after SuspendChangedEvent has been called.  Also raises the Changed event if the ChangedEventSuspended count is reduced to zero and any changes were made while events were suspended. Must be called once for each call to SuspendChangedEvent.</summary></member><member name="E:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.Changed"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.PMAlign.ICogPMAlignFlexRunParams"><remarks><PARA>Interface for PMAlign run parameters applying to the PatFlex algorithm.</PARA></remarks><summary>Interface for PMAlign run parameters applying to the PatFlex algorithm.</summary></member><member name="P:Cognex.VisionPro.PMAlign.ICogPMAlignFlexRunParams.PartialMatchCoverageThreshold"><summary>When PartialMatchEnabled is true, this specifies the minimum fraction of the pattern that must be matched in a valid PatFlex result.</summary></member><member name="P:Cognex.VisionPro.PMAlign.ICogPMAlignFlexRunParams.PartialMatchEnabled"><summary>If True then PatFlex will find results that match only a fraction of the full pattern (with a score better than the AcceptThreshold.</summary></member><member name="P:Cognex.VisionPro.PMAlign.ICogPMAlignFlexRunParams.DeformationFit"><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignFlexRunParams_DeformationFit--><ul /></event><summary>Controls the type of fit PatFlex will use to model deformation in the runtime input image.</summary><remarks><PARA>Controls the type of fit PatFlex will use to model deformation in the runtime input image.</PARA><PARA>
	If you specify <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignFlexDeformationFitConstants">Perspective</see> when 
	you know that only perspective deformation is present, you can generate an accurate deformation result in less time. 
	Specifying <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignFlexDeformationFitConstants">SurfaceFlex</see> can 
	model more general deformation but requires more time.
	</PARA><DEFAULT><see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignFlexDeformationFitConstants">SurfaceFlex</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.PMAlign.ICogPMAlignFlexRunParams.SaveDeformationInfo"><summary>Enumeration indicating which runtime data should be saved for creating PatFlex diagnostic graphics from results.  Must be set to 'Transform' to enable deformation grid diagnostic, or 'TransformAndUnwarpData' to enable unwarped image.</summary><remarks><PARA>
	Which runtime data should be saved for creating PatFlex diagnostic graphics from results. 
	You must specify
	<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignFlexDeformationInfoConstants">Transform</see>
	 to enable the deformation grid diagnostic graphic or
	  <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignFlexDeformationInfoConstants">TransformAndUnwarpData</see>
	  to enable the unwarped image diagnostic graphic
	</PARA><PARA>The value of this property is ignored if you are using the PatQuick or PatMax algorithm. </PARA><NOTE>
	Specifying any value other than <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignFlexDeformationInfoConstants">None</see> will result 
	in significant extra time being spent for each result. If you specify 
	<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignFlexDeformationInfoConstants">TransformAndUnwarpData</see>,
	significant extra space is required to persist the results of a search.
	</NOTE><DEFAULT><see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignFlexDeformationInfoConstants">None</see></DEFAULT></remarks><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignFlexRunParams_SaveDeformationInfo--><ul /></event></member><member name="P:Cognex.VisionPro.PMAlign.ICogPMAlignFlexRunParams.ControlPointsY"><remarks><PARA>
	The number of 
	<see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="control_points">control points</see>
	in the Y direction. Increasing the number of control points allows the transform to better match patterns with areas of heavily local deformation (sharper features).</PARA><DEFAULT>6</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is less than 2.</para></exception><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignFlexRunParams_ControlPointsY--><ul /></event><summary>The number of control points in the Y direction. Increasing the number of control points allows the transform to better match patterns with areas of heavy local deformation (i.e., sharper features).</summary></member><member name="P:Cognex.VisionPro.PMAlign.ICogPMAlignFlexRunParams.ControlPointsX"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is less than 2.</para></exception><remarks><PARA>
	The number of 
	<see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="control_points">control points</see> 
	in the X direction. Increasing the number of control points allows the transform to better match patterns with areas of heavily local deformation (sharper features).</PARA><DEFAULT>6</DEFAULT></remarks><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignFlexRunParams_ControlPointsX--><ul /></event><summary>The number of control points in the X direction.  Increasing the number of control points allows the transform to better match patterns with areas of heavily local deformation (i.e., sharper features).</summary></member><member name="P:Cognex.VisionPro.PMAlign.ICogPMAlignFlexRunParams.Refinement"><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignFlexRunParams_Refinement--><ul /></event><remarks><PARA>
	The amount of 
	<see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="refinement_mode">refinement</see> 
	done on the deformation transform. 
	Specifying <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignFlexRefinementConstants">None</see> 
	may produce some error. Higher levels of refinement will be more accurate at the expense of time.
	</PARA><DEFAULT><see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignFlexRefinementConstants">Coarse</see></DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is not a member of <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignFlexRefinementConstants" />.</para></exception><summary>The amount of refinement done on the deformation transform. A value of 'None' may contain some error. Higher levels of refinement will be more accurate at the expense of time.</summary></member><member name="P:Cognex.VisionPro.PMAlign.ICogPMAlignFlexRunParams.Smoothness"><summary>The smoothness value used in fitting the deformation transform to the runtime input image.</summary><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is less than 0.0.</para></exception><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignFlexRunParams_Smoothness--><ul /></event><remarks><PARA>
	The 
	<see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="smoothness_value">smoothness value</see> 
	used in fitting the deformation transform to the runtime input image.
	</PARA><NOTE>A value of 0.0 indicates that no smoothing is done, which may produce a less accurate overall 
	result, while a value approaching infinity indicates that the transformation is affine.</NOTE><DEFAULT>3.0</DEFAULT></remarks></member><member name="P:Cognex.VisionPro.PMAlign.ICogPMAlignFlexRunParams.MaxDeformationRate"><summary>The maximum deformation rate to be accommodated in a PatFlex alignment.</summary><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignFlexRunParams_MaxDeformationRate--><ul /></event><remarks><PARA>
	The maximum 
	<see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="expected_and_maximum_deformation_rate">deformation rate</see> 
	to be accommodated in a PatFlex alignment.
	</PARA><PARA>
	Increasing values require more training time and may cause spurious matches at run time. 
	</PARA><DEFAULT>0.3</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is less than 0.0 or greater than 1.0.</para></exception></member><member name="T:Cognex.VisionPro.PMAlign.CogPMAlignZoneConstants"><summary>Enumeration of configuration methods for a PMAlign DOF zone.</summary><remarks><PARA>Enumeration of configuration methods for a PMAlign DOF zone.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignZoneConstants.LowHigh"><remarks><PARA>Configure a DOF zone so that PMAlign will use the low &amp; high limits for the expected range of values.</PARA></remarks><summary>Configure a DOF zone so that PMAlign will use the low &amp; high limits for the expected range of values.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignZoneConstants.Nominal"><remarks><PARA>Configure a DOF zone so that PMAlign only finds pattern instances that are close to the nominal value.</PARA></remarks><summary>Configure a DOF zone so that PMAlign only finds pattern instances that are close to the nominal value.</summary></member><member name="T:Cognex.VisionPro.PMAlign.CogPMAlignRunAlgorithmConstants"><remarks><PARA>Algorithm used to run the PMAlign pattern.</PARA></remarks><summary>Algorithm used to run the PMAlign pattern.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunAlgorithmConstants.PatMaxPerspective"><summary>Run PMAlign using the perspective PatMax algorithm.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunAlgorithmConstants.PatFlex"><remarks><PARA>Run PMAlign using the PatFlex algorithm.</PARA></remarks><summary>Run PMAlign using the PatFlex algorithm.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunAlgorithmConstants.BestTrained"><remarks><PARA>If the PatFlex algorithm is trained, run PMAlign using it. Otherwise, run PMAlign using the PatMax algorithm if the pattern is trained for PatMax and  the PatQuick algorithm if it is not.</PARA></remarks><summary>Run PMAlign using the PatMax algorithm if the pattern is trained for both PatMax and PatQuick or PatMax high sensitivity.  Otherwise, run using the algorithm for which the pattern was trained.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunAlgorithmConstants.PatQuick"><summary>Run PMAlign using the PatQuick algorithm.</summary><remarks><PARA>Run PMAlign using the PatQuick algorithm.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunAlgorithmConstants.PatMax"><summary>Run PMAlign using the PatMax algorithm.</summary><remarks><PARA>Run PMAlign using the PatMax algorithm.</PARA></remarks></member><member name="T:Cognex.VisionPro.PMAlign.CogPMAlignRunModeConstants"><summary>Mode used to run the PMAlign pattern.</summary><remarks><para>
			Use these constants with <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.RunMode" />
			to specify the way that the PatMax Align tool works.
			<!-- need a link to the User's Guide here --></para></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunModeConstants.RefineStartPose"><summary>Refine the supplied start pose.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunModeConstants.SearchImage"><summary>Search the input image for possible matches.</summary></member><member name="T:Cognex.VisionPro.PMAlign.CogPMAlignFlexRefinementConstants"><remarks><PARA>Enumeration of refinement levels for the PatFlex deformation transform.</PARA></remarks><summary>Enumeration of refinement levels for the PatFlex deformation transform.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignFlexRefinementConstants.Fine"><summary>The deformation transform is refined, as described in 'Medium', to the accuracy of the fine grain limit set for the pattern.</summary><remarks><PARA>The deformation transform is refined, as described in
		<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignFlexRefinementConstants">Medium</see>.
		</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignFlexRefinementConstants.Medium"><remarks><PARA>The deformation transform will be refined to the accuracy of the coarse grain limit set for the pattern, and then further refined to eliminate high-level deformation inaccuracies that can occur in some applications.</PARA></remarks><summary>The deformation transform will be refined to the accuracy of the coarse grain limit set for the pattern, and then further refined to eliminate high-level deformation inaccuracies that can occur in some applications.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignFlexRefinementConstants.Coarse"><remarks><PARA>The deformation transform will be refined to the accuracy of the coarse grain limit set for the pattern.</PARA></remarks><summary>The deformation transform will be refined to the accuracy of the coarse grain limit set for the pattern.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignFlexRefinementConstants.None"><remarks><PARA>The deformation transform may have some error in the mapping.</PARA></remarks><summary>The deformation transform may have some error in the mapping.</summary></member><member name="T:Cognex.VisionPro.PMAlign.CogPMAlignFlexDeformationInfoConstants"><remarks><PARA>Enumeration of types of deformation info that can be saved.</PARA></remarks><summary>Enumeration of types of deformation info that can be saved.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignFlexDeformationInfoConstants.Transform"><summary>The deformation transform is stored at runtime.</summary><remarks><PARA>The deformation transform is stored at runtime. This information is used by the tool to generate the flex deformation grid diagnostic graphic, but 
	is not available directly to your application.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignFlexDeformationInfoConstants.TransformAndUnwarpData"><summary>The deformation transform and unwarp data are computed and stored at runtime. The unwarp data is needed to produce unwarp images in the result.</summary><remarks><PARA>The deformation transform and unwarp data are computed and stored at runtime. The unwarp data is needed to produce unwarped images in the result.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignFlexDeformationInfoConstants.None"><remarks><PARA>No flex deformation information is stored at runtime.</PARA></remarks><summary>No flex deformation information is stored at runtime.</summary></member><member name="T:Cognex.VisionPro.PMAlign.CogPMAlignFlexDeformationFitConstants"><remarks><PARA>Enumeration of fit types used to model deformation in the input image.</PARA></remarks><summary>Enumeration of fit types used to model deformation in the input image.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignFlexDeformationFitConstants.SurfaceFlex"><remarks><PARA>The tool looks for general surface flex deformation of the pattern in the runtime input image.</PARA></remarks><summary>The tool looks for general surface flex deformation of the pattern in the runtime input image.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignFlexDeformationFitConstants.Perspective"><remarks><PARA>The tool looks for perspective deformation of the pattern in the runtime input image. This option requires less time than specifying 
		<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignFlexDeformationFitConstants">SurfaceFlex</see>.
		</PARA></remarks><summary>The tool looks for perspective deformation of the pattern in the runtime input image.</summary></member><member name="T:Cognex.VisionPro.PMAlign.CogPMAlignResultGraphicConstants"><summary>Constants used to specify desired result graphics.</summary><remarks><PARA>Constants used to specify desired result graphics.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignResultGraphicConstants.All"><summary>Draw all result graphics.</summary><remarks><PARA>Draw all result graphics.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignResultGraphicConstants.FlexDeformationGrid"><summary>Draw the deformation grid for this result. This is the square, pixel aligned grid covering the training region in the training image, mapped through the deformation transform.</summary><remarks><PARA>Draw the deformation grid for this result. This is the square, pixel aligned grid covering the training region in the training image, mapped through the deformation transform.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignResultGraphicConstants.MatchShapeModels"><remarks><PARA>Draw the matching shape models for this result. This is a mapped version of the TrainShapeModels, clipped by TrainRegion if necessary, indicating where the pattern was found in the run-time image.</PARA></remarks><summary>Draw the matching shape models for this result.  This is a mapped version of the TrainShapeModels, clipped by TrainRegion if necessary, indicating where the pattern was found in the run-time image.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignResultGraphicConstants.CoordinateAxes"><remarks><PARA>Draw the pattern origin coordinate axes.</PARA></remarks><summary>Draw the pattern origin coordinate axes.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignResultGraphicConstants.MatchRegion"><summary>Draw the match region for this result.  This is a mapped version of the TrainRegion indicating where the pattern was found in the run-time image.  If no TrainRegion is provided when training from shapes then TrainRegion is the bounding box of the shapes.</summary><remarks><PARA>Draw the match region for this result.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignResultGraphicConstants.MatchFeatures"><remarks><PARA>Draw match features for this result.</PARA></remarks><summary>Draw match features for this result.  Features drawn in red indicate poor matches, features drawn in yellow indicate fair matches, and features drawn in green indicate good matches.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignResultGraphicConstants.BoundingBox"><remarks><PARA>Draw a bounding box around the match region for this result.</PARA></remarks><summary>Draw a bounding box around the match region for this result.  The bounding box will be aligned with the selected space of the run-time image.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignResultGraphicConstants.Origin"><remarks><PARA>Draw a cross at the pattern origin of this result.</PARA></remarks><summary>Draw a cross at the pattern origin of this result.  The arms of the cross will be aligned with X &amp; Y axes of pattern space.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignResultGraphicConstants.TipText"><summary>Turn on tip text for result graphics.</summary><remarks><PARA>Turn on tip text for result graphics.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignResultGraphicConstants.None"><summary>Draw no result graphics.</summary><remarks><PARA>Draw no result graphics.</PARA></remarks></member><member name="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainAlgorithmConstants"><summary>Algorithms for which the PMAlign pattern is to be trained.</summary><remarks><PARA>Algorithms for which the PMAlign pattern is to be trained.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignTrainAlgorithmConstants.PatMaxPerspective"><summary>Train for perspective PatMax algorithm only.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignTrainAlgorithmConstants.PatMaxHighSensitivity"><summary>Train for PatMax algorithm only in high sensitivity mode.</summary><remarks><PARA>Train for PatMax algorithm only in high sensitivity mode.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignTrainAlgorithmConstants.PatFlex"><remarks><PARA>Train for PatFlex algorithm only.</PARA></remarks><summary>Train for PatFlex algorithm only.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignTrainAlgorithmConstants.PatMaxAndPatQuick"><remarks><PARA>Train for both the PatMax &amp; PatQuick algorithms.</PARA></remarks><summary>Train for both the PatMax &amp; PatQuick algorithms.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignTrainAlgorithmConstants.PatQuick"><summary>Train for PatQuick algorithm only.</summary><remarks><PARA>Train for PatQuick algorithm only.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignTrainAlgorithmConstants.PatMax"><summary>Train for PatMax algorithm only.</summary><remarks><PARA>Train for PatMax algorithm only.</PARA></remarks></member><member name="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants"><remarks><PARA>Train mode constants are used to indicate whether a PMAlign pattern should be trained based on the pixel content of a training image or trained based on a synthetic pattern described by a collection of shape models.</PARA></remarks><summary>Train mode constants are used to indicate whether a PMAlign pattern should be trained based on the pixel content of a training image or trained based on a synthetic pattern described by a collection of shape models.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants.Image"><remarks><PARA>Train the PMAlign pattern based on pixel content of the TrainImage property.</PARA></remarks><summary>Train the PMAlign pattern based on pixel content of the TrainImage property.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants.ShapeModelsWithTransform"><remarks><PARA>Train the PMAlign pattern based on a synthetic pattern description provided via the TrainShapeModels property. The space of the shapes are defined by the TrainShapeModelsTransform which is a shape space from pixel space transform.</PARA></remarks><summary>Train the PMAlign pattern based on a synthetic pattern description provided via the TrainShapeModels property.  The space of the shapes are defined by the TrainShapeModelsTransform which is a shape space from pixel space transform.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignTrainModeConstants.ShapeModelsWithImage"><summary>Train the PMAlign pattern based on a synthetic pattern description provided via the TrainShapeModels property.  The selected space of the shapes are resolved using the coordinate space tree of the TrainImage.</summary><remarks><PARA>Train the PMAlign pattern based on a synthetic pattern description provided via the TrainShapeModels property. The selected space of the shapes are resolved using the coordinate space tree of the TrainImage.</PARA></remarks></member><member name="T:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordConstants"><summary>Enumeration of Non-Diagnostic data that can be provided in the Tool's LastRunRecord.</summary><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.LastRunRecordEnable" /> to specify the 
<see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogPMAlign Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogpmaligntool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordConstants.ResultsMatchShapeModels"><summary>Include the matching shape models of each result in the LastRunRecord.</summary><remarks><PARA>Include the matching shape models of each result in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordConstants.ResultsCoordinateAxes"><remarks><PARA>Include the coordinate axes of each result in the LastRunRecord.</PARA></remarks><summary>Include the coordinate axes of each result in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordConstants.ResultsMatchRegion"><remarks><PARA>Include the match region of each result in the LastRunRecord.</PARA></remarks><summary>Include the match region of each result in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordConstants.ResultsBoundingBox"><summary>Include the bounding box of each result in the LastRunRecord.</summary><remarks><PARA>Include the bounding box of each result in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordConstants.ResultsOrigin"><remarks><PARA>Include the origin of each result in the LastRunRecord.</PARA></remarks><summary>Include the origin of each result in the LastRunRecord.</summary></member><member name="T:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordDiagConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.LastRunRecordDiagEnable" /> to specify the 
diagnostic
<see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogPMAlign Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateLastRunRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogpmaligntool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of Diagnostic data that can be provided in the Tool's LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordDiagConstants.SearchRegion"><summary>Include the search region in the LastRunRecord.</summary><remarks><PARA>Include the search region in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordDiagConstants.FlexUnwarpedImages"><remarks><PARA>Include an 
	unwarped version of the <see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.InputImage" /> in the
	LastRunRecord. 
	The unwarped image will be most accurate in the portion that corresponds to the location of the trained pattern in the image. Parts of the image 
	outside of this region may not be accurate.</PARA></remarks><summary>Include an image 'unwarped' by the PatFlex deformation transform in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordDiagConstants.FlexDeformationGrid"><remarks><PARA>Include a graphic representing the PatFlex deformation transform in the LastRunRecord.</PARA></remarks><summary>Include a graphic representing the PatFlex deformation transform in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordDiagConstants.SearchImageMask"><remarks><PARA>Include a graphic representing the input image mask in the LastRunRecord.</PARA></remarks><summary>Include a graphic representing the input image mask in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordDiagConstants.ResultsMatchFeatures"><summary>Include the match features of each result in the LastRunRecord.</summary><remarks><PARA>Include the match features of each result in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordDiagConstants.TrainedPatternShapeModels"><remarks><PARA>Include a graphic representing the trained pattern shape models in the LastRunRecord.</PARA></remarks><summary>Include a graphic representing the trained pattern shape models in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordDiagConstants.TrainedPatternImageMask"><summary>Include a graphic representing the trained pattern image mask in the LastRunRecord.</summary><remarks><PARA>Include a graphic representing the trained pattern image mask in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordDiagConstants.TrainedPatternFeaturesFine"><summary>Include the fine features of the pattern in the trained pattern image of the LastRunRecord.</summary><remarks><PARA>Include the fine features of the pattern in the trained pattern image of the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordDiagConstants.TrainedPatternFeaturesCoarse"><summary>Include the coarse features of the pattern in the trained pattern image of the LastRunRecord.</summary><remarks><PARA>Include the coarse features of the pattern in the trained pattern image of the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordDiagConstants.TrainedPatternOrigin"><summary>Include the pattern origin in the trained pattern image of the LastRunRecord.</summary><remarks><PARA>Include the pattern origin in the trained pattern image of the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordDiagConstants.TrainedPatternRegion"><summary>Include the pattern region in the trained pattern image of the LastRunRecord.</summary><remarks><PARA>Include the pattern region in the trained pattern image of the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordDiagConstants.TrainedPatternImage"><remarks><PARA>Include the trained pattern image in the LastRunRecord. This is just the portion of the image that was within the train region.</PARA></remarks><summary>Include the trained pattern image in the LastRunRecord. This is just the portion of the image that was within the train region.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordDiagConstants.TrainShapeModels"><summary>Include a graphic representing the train shape models in the LastRunRecord.</summary><remarks><PARA>Include a graphic representing the train shape models in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordDiagConstants.TrainImageMask"><summary>Include a graphic representing the train image mask in the LastRunRecord.</summary><remarks><PARA>Include a graphic representing the train image mask in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordDiagConstants.PatternFeaturesFine"><remarks><PARA>Include the fine features of the pattern in the LastRunRecord.</PARA></remarks><summary>Include the fine features of the pattern in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordDiagConstants.PatternFeaturesCoarse"><summary>Include the coarse features of the pattern in the LastRunRecord.</summary><remarks><PARA>Include the coarse features of the pattern in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordDiagConstants.PatternOrigin"><remarks><PARA>Include a pattern origin in the LastRunRecord.</PARA></remarks><summary>Include a pattern origin in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordDiagConstants.TrainRegion"><summary>Include the train region in the LastRunRecord.</summary><remarks><PARA>Include the train region in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordDiagConstants.TrainImageDeepCopy"><summary>Include the entire train image in the LastRunRecord.</summary><remarks><PARA>Include the entire train image in the LastRunRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordDiagConstants.InputImageDeepCopy"><remarks><PARA>Include a deep copy of the input image in the LastRunRecord.</PARA></remarks><summary>Include a deep copy of the input image in the LastRunRecord.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignLastRunRecordDiagConstants.InputImageByReference"><summary>Include a reference to the input image in the LastRunRecord.</summary><remarks><PARA>Include a reference to the input image in the LastRunRecord.</PARA></remarks></member><member name="T:Cognex.VisionPro.PMAlign.CogPMAlignCurrentRecordConstants"><remarks><PARA>
    Use these constants with
<see cref="P:Cognex.VisionPro.PMAlign.CogPMAlignTool.CurrentRecordEnable" /> to specify the 
<see cref="u:Programming.Tools.Theory.ToolRecords">tool records</see> that the
CogPMAlign Tool
generates when you call
<see cref="M:Cognex.VisionPro.ICogTool.CreateCurrentRecord" />.
</PARA><PARA>
See <see cref="u:Programming.Tools.Theory.RecordKeys" cgnxAnchor="cogpmaligntool_record_keys">About Record Keys</see>  for a list of the record keys that the tool uses.
</PARA></remarks><summary>Enumeration of data that can be provided in the Tool's CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignCurrentRecordConstants.SearchRegion"><remarks><PARA>Include the search region in the CurrentRecord.</PARA></remarks><summary>Include the search region in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignCurrentRecordConstants.SearchImageMask"><remarks><PARA>Include a graphic representing the input image mask in the CurrentRecord.</PARA></remarks><summary>Include a graphic representing the input image mask in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignCurrentRecordConstants.TrainedPatternShapeModels"><remarks><PARA>Include the trained pattern shape models in the CurrentRecord. This is just the portion of the shape models that are within the pixel aligned bounding box of the train region.</PARA></remarks><summary>Include the trained pattern shape models in the CurrentRecord.  This is just the portion of the shape models that are within the pixel aligned bounding box of the train region.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignCurrentRecordConstants.TrainedPatternFeaturesFine"><summary>Include the fine features of the pattern in the CurrentRecord.</summary><remarks><PARA>Include the fine features of the pattern in the CurrentRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignCurrentRecordConstants.TrainedPatternFeaturesCoarse"><remarks><PARA>Include the coarse features of the pattern in the CurrentRecord.</PARA></remarks><summary>Include the coarse features of the pattern in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignCurrentRecordConstants.TrainedPatternOrigin"><remarks><PARA>Include a non interactive pattern origin in the CurrentRecord.</PARA></remarks><summary>Include a non interactive pattern origin in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignCurrentRecordConstants.TrainedPatternImageMask"><summary>Include a graphic representing the trained pattern image mask in the CurrentRecord.</summary><remarks><PARA>Include a graphic representing the trained pattern image mask in the CurrentRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignCurrentRecordConstants.TrainedPatternRegion"><remarks><PARA>Include the non interactive trained pattern region in the CurrentRecord.</PARA></remarks><summary>Include the non interactive trained pattern region in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignCurrentRecordConstants.TrainedPatternImage"><remarks><PARA>Include the trained pattern image in the CurrentRecord. This is just the portion of the image that was within the train region.</PARA></remarks><summary>Include the trained pattern image in the CurrentRecord. This is just the portion of the image that was within the train region.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignCurrentRecordConstants.TrainShapeModels"><summary>Include the train shape models in the CurrentRecord.</summary><remarks><PARA>Include the train shape models in the CurrentRecord.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignCurrentRecordConstants.PatternFeaturesFine"><remarks><PARA>Include the fine features of the pattern in the CurrentRecord.</PARA></remarks><summary>Include the fine features of the pattern in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignCurrentRecordConstants.PatternFeaturesCoarse"><remarks><PARA>Include the coarse features of the pattern in the CurrentRecord.</PARA></remarks><summary>Include the coarse features of the pattern in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignCurrentRecordConstants.PatternOrigin"><remarks><PARA>Include an interactive pattern origin in the CurrentRecord.</PARA></remarks><summary>Include an interactive pattern origin in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignCurrentRecordConstants.TrainImageMask"><remarks><PARA>Include a graphic representing the train image mask in the CurrentRecord.</PARA></remarks><summary>Include a graphic representing the train image mask in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignCurrentRecordConstants.TrainRegion"><remarks><PARA>Include the (interactive) train region in the CurrentRecord.</PARA></remarks><summary>Include the (interactive) train region in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignCurrentRecordConstants.TrainImage"><remarks><PARA>Include the entire train image in the CurrentRecord.</PARA></remarks><summary>Include the entire train image in the CurrentRecord.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignCurrentRecordConstants.InputImage"><summary>Include the input image in the CurrentRecord.</summary><remarks><PARA>Include the input image in the CurrentRecord.</PARA></remarks></member><member name="T:Cognex.VisionPro.PMAlign.CogPMAlignRunDiagnosticConstants"><remarks><PARA>Diagnostic information about running PMAlign.</PARA></remarks><summary>Diagnostic information about running PMAlign.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunDiagnosticConstants.Degenerate"><remarks><PARA>This PMAlign result is one of several degenerate results.</PARA></remarks><summary>This PMAlign result is one of several degenerate results.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunDiagnosticConstants.ExcessClutter"><remarks><PARA>PatMax discarded one or more patterns because they had too many extraneous features.  You may be able to see these results by ignoring clutter when scoring.  The InfoString will indicate the number of discarded results and the best score.</PARA></remarks><summary>PatMax discarded one or more patterns because they had too many extraneous features.  You may be able to see these results by ignoring clutter when scoring.  The info string will indicate the number of discarded results and the best score.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunDiagnosticConstants.Proximity"><summary>PMAlign discarded one or more patterns because they overlapped other better matches.  You may be able to see these results by adjusting the relevant overlap threshold.  The info string will indicate the number of discarded results and the best score.</summary><remarks><PARA>PMAlign discarded one or more patterns because they overlapped other better matches.  You may be able to see these results by adjusting the relevant overlap threshold.  The InfoString will indicate the number of discarded results and the best score.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignRunDiagnosticConstants.ContrastThreshold"><summary>PMAlign discarded one or more patterns because their contrast was below the contrast threshold.  You may be able to see these results by lowering the contrast threshold.  The info string will indicate the number of discarded results and the best score.</summary><remarks><PARA>PMAlign discarded one or more patterns because their contrast was below the contrast threshold.  You may be able to see these results by lowering the contrast threshold.  The InfoString will indicate the number of discarded results and the best score.</PARA></remarks></member><member name="T:Cognex.VisionPro.PMAlign.CogPMAlignTrainDiagnosticConstants"><summary>Diagnostic information about the training the pattern.</summary><remarks><PARA>Diagnostic information about the training the pattern.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignTrainDiagnosticConstants.Degenerate"><summary>Pattern is degenerate.  The results will probably be unstable because all of the coarse granularity boundary points have the same direction.  Examine the coarse diagnostic graphics.</summary><remarks><PARA>Pattern is degenerate.  The results will probably be unstable because all of the coarse granularity boundary points have the same direction.  Examine the coarse diagnostic graphics.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignTrainDiagnosticConstants.Granularity"><remarks><PARA>Difficult to auto select feature grain limits.  Manual override may be desirable by setting GrainLimitAutoSelect to false.  Examine the coarse and fine diagnostic graphics.</PARA></remarks><summary>Difficult to auto select feature grain limits.  Manual override may be desirable by setting GrainLimitAutoSelect to false.  Examine the coarse and fine diagnostic graphics.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignTrainDiagnosticConstants.FineFeatures"><remarks><PARA>Pattern may run slowly due to predominance of fine features.  Manual override may be desirable by setting GrainLimitAutoSelect to false and specifying a larger coarse granularity value.</PARA></remarks><summary>Pattern may run slowly due to predominance of fine features.  Manual override may be desirable by setting GrainLimitAutoSelect to false and specifying a larger coarse granularity value.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignTrainDiagnosticConstants.ConfusingDOF"><remarks><PARA>Pattern may contain insufficient information to measure DOF reliably.  The InfoString will indicate the confusing DOF.</PARA></remarks><summary>Pattern may contain insufficient information to measure DOF reliably.  The info string will indicate the confusing DOF.</summary></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignTrainDiagnosticConstants.Blurry"><summary>PatMax trained a pattern, but because the image was blurry, the accuracy of search results may be reduced.</summary><remarks><PARA>PatMax trained a pattern, but because the image was blurry, the accuracy of search results may be reduced.</PARA></remarks></member><member name="F:Cognex.VisionPro.PMAlign.CogPMAlignTrainDiagnosticConstants.TooFewFeatures"><remarks><PARA>PMAlign did not detect enough features to train a reliable pattern.  Examine the coarse and fine diagnostic graphics.</PARA></remarks><summary>PMAlign did not detect enough features to train a reliable pattern.  Examine the coarse and fine diagnostic graphics.</summary></member><member name="F:Cognex.VisionPro.PMAlign.Implementation.Internal.CogPMAlignFlexRunParams.SfMaxDeformationRate"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by MaxDeformationRate may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.Implementation.Internal.CogPMAlignFlexRunParams.SfSmoothness"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Smoothness may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.Implementation.Internal.CogPMAlignFlexRunParams.SfRefinement"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by Refinement may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.Implementation.Internal.CogPMAlignFlexRunParams.SfControlPointsX"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ControlPointsX may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.Implementation.Internal.CogPMAlignFlexRunParams.SfControlPointsY"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by ControlPointsY may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.Implementation.Internal.CogPMAlignFlexRunParams.SfSaveDeformationInfo"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by SaveDeformationInfo may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.Implementation.Internal.CogPMAlignFlexRunParams.SfDeformationFit"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by DeformationFit may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.Implementation.Internal.CogPMAlignFlexRunParams.SfPartialMatchEnabled"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PartialMatchEnabled may have changed.</summary></member><member name="F:Cognex.VisionPro.PMAlign.Implementation.Internal.CogPMAlignFlexRunParams.SfPartialMatchCoverageThreshold"><summary>This bit will be set in the EventArgs of a Changed event every time the value returned by PartialMatchCoverageThreshold may have changed.</summary></member><member name="P:Cognex.VisionPro.PMAlign.Implementation.Internal.CogPMAlignFlexRunParams.DeformationFit"><remarks><PARA>Controls the type of fit PatFlex will use to model deformation in the runtime input image.</PARA><PARA>
	If you specify <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignFlexDeformationFitConstants">Perspective</see> when 
	you know that only perspective deformation is present, you can generate an accurate deformation result in less time. 
	Specifying <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignFlexDeformationFitConstants">SurfaceFlex</see> can 
	model more general deformation but requires more time.
	</PARA><DEFAULT><see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignFlexDeformationFitConstants">SurfaceFlex</see></DEFAULT></remarks><summary>Controls the type of fit PatFlex will use to model deformation in the runtime input image.</summary><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignFlexRunParams_DeformationFit--><ul /></event></member><member name="P:Cognex.VisionPro.PMAlign.Implementation.Internal.CogPMAlignFlexRunParams.SaveDeformationInfo"><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignFlexRunParams_SaveDeformationInfo--><ul /></event><summary>Enumeration indicating which runtime data should be saved for creating PatFlex diagnostic graphics from results.  Must be set to 'Transform' to enable deformation grid diagnostic, or 'TransformAndUnwarpData' to enable unwarped image.</summary><remarks><PARA>
	Which runtime data should be saved for creating PatFlex diagnostic graphics from results. 
	You must specify
	<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignFlexDeformationInfoConstants">Transform</see>
	 to enable the deformation grid diagnostic graphic or
	  <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignFlexDeformationInfoConstants">TransformAndUnwarpData</see>
	  to enable the unwarped image diagnostic graphic
	</PARA><PARA>The value of this property is ignored if you are using the PatQuick or PatMax algorithm. </PARA><NOTE>
	Specifying any value other than <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignFlexDeformationInfoConstants">None</see> will result 
	in significant extra time being spent for each result. If you specify 
	<see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignFlexDeformationInfoConstants">TransformAndUnwarpData</see>,
	significant extra space is required to persist the results of a search.
	</NOTE><DEFAULT><see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignFlexDeformationInfoConstants">None</see></DEFAULT></remarks></member><member name="P:Cognex.VisionPro.PMAlign.Implementation.Internal.CogPMAlignFlexRunParams.ControlPointsY"><summary>The number of control points in the Y direction. Increasing the number of control points allows the transform to better match patterns with areas of heavy local deformation (i.e., sharper features).</summary><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignFlexRunParams_ControlPointsY--><ul /></event><remarks><PARA>
	The number of 
	<see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="control_points">control points</see>
	in the Y direction. Increasing the number of control points allows the transform to better match patterns with areas of heavily local deformation (sharper features).</PARA><DEFAULT>6</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is less than 2.</para></exception></member><member name="P:Cognex.VisionPro.PMAlign.Implementation.Internal.CogPMAlignFlexRunParams.ControlPointsX"><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignFlexRunParams_ControlPointsX--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is less than 2.</para></exception><remarks><PARA>
	The number of 
	<see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="control_points">control points</see> 
	in the X direction. Increasing the number of control points allows the transform to better match patterns with areas of heavily local deformation (sharper features).</PARA><DEFAULT>6</DEFAULT></remarks><summary>The number of control points in the X direction.  Increasing the number of control points allows the transform to better match patterns with areas of heavily local deformation (i.e., sharper features).</summary></member><member name="P:Cognex.VisionPro.PMAlign.Implementation.Internal.CogPMAlignFlexRunParams.Refinement"><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignFlexRunParams_Refinement--><ul /></event><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is not a member of <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignFlexRefinementConstants" />.</para></exception><remarks><PARA>
	The amount of 
	<see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="refinement_mode">refinement</see> 
	done on the deformation transform. 
	Specifying <see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignFlexRefinementConstants">None</see> 
	may produce some error. Higher levels of refinement will be more accurate at the expense of time.
	</PARA><DEFAULT><see cref="T:Cognex.VisionPro.PMAlign.CogPMAlignFlexRefinementConstants">Coarse</see></DEFAULT></remarks><summary>The amount of refinement done on the deformation transform. A value of 'None' may contain some error. Higher levels of refinement will be more accurate at the expense of time.</summary></member><member name="P:Cognex.VisionPro.PMAlign.Implementation.Internal.CogPMAlignFlexRunParams.PartialMatchCoverageThreshold"><summary>When PartialMatchEnabled is true, this specifies the minimum fraction of the pattern that must be matched in a valid PatFlex result.</summary></member><member name="P:Cognex.VisionPro.PMAlign.Implementation.Internal.CogPMAlignFlexRunParams.PartialMatchEnabled"><summary>If True then PatFlex will find results that match only a fraction of the full pattern (with a score better than the AcceptThreshold.</summary></member><member name="P:Cognex.VisionPro.PMAlign.Implementation.Internal.CogPMAlignFlexRunParams.Smoothness"><summary>The smoothness value used in fitting the deformation transform to the runtime input image.</summary><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignFlexRunParams_Smoothness--><ul /></event><remarks><PARA>
	The 
	<see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="smoothness_value">smoothness value</see> 
	used in fitting the deformation transform to the runtime input image.
	</PARA><NOTE>A value of 0.0 indicates that no smoothing is done, which may produce a less accurate overall 
	result, while a value approaching infinity indicates that the transformation is affine.</NOTE><DEFAULT>3.0</DEFAULT></remarks><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is less than 0.0.</para></exception></member><member name="P:Cognex.VisionPro.PMAlign.Implementation.Internal.CogPMAlignFlexRunParams.MaxDeformationRate"><exception cref="T:System.ArgumentException" cgnxHRESULT="E_INVALIDARG"><para>The supplied value is less than 0.0 or greater than 1.0.</para></exception><event cref="E:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.Changed" cgnxEvent="singleState"><para>
		
		Fires when this property changes. 
	</para><para>The following state flag may be affected:</para><!--STATEID:cogPMAlignFlexRunParams_MaxDeformationRate--><ul /></event><summary>The maximum deformation rate to be accommodated in a PatFlex alignment.</summary><remarks><PARA>
	The maximum 
	<see cref="u:Search.PMAlign.Theory.PatMax" cgnxAnchor="expected_and_maximum_deformation_rate">deformation rate</see> 
	to be accommodated in a PatFlex alignment.
	</PARA><PARA>
	Increasing values require more training time and may cause spurious matches at run time. 
	</PARA><DEFAULT>0.3</DEFAULT></remarks></member><member name="T:Cognex.VisionPro.PMAlign.CogPMAlignPattern.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.PMAlign.CogPMAlignRunParams.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.PMAlign.CogPMAlignZoneAngle.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member><member name="T:Cognex.VisionPro.PMAlign.CogPMAlignZoneScale.ChangedEventHandler"><summary>Occurs when one or more parts of the object's state may have changed.</summary></member></members></doc>